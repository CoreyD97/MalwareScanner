package com.coreyd97.antivirus.server.ui;

import com.coreyd97.antivirus.common.taskscheduler.TaskSchedulerListener;
import com.coreyd97.antivirus.common.taskscheduler.Task;

import javax.swing.*;
import java.awt.*;
import java.util.HashMap;
import java.util.Map;

public class TaskManagerPanel extends JScrollPane implements TaskSchedulerListener {
    JPanel contentPanel;
    Map<Task, TaskProgressPanel> taskPanels;
    GridBagConstraints gbc = new GridBagConstraints();

    public TaskManagerPanel(){
        this.contentPanel = new JPanel();
        this.setMaximumSize(this.getSize());
        this.setViewportView(this.contentPanel);
        this.taskPanels = new HashMap<>();
        contentPanel.setLayout(new GridBagLayout());
        gbc.fill = GridBagConstraints.BOTH;
        gbc.weightx = 1;
        gbc.weighty = 0;
        gbc.gridx = gbc.gridy = 1;
        gbc.ipady = 7;

        GridBagConstraints padGbc = new GridBagConstraints();
        padGbc.fill = GridBagConstraints.BOTH;
        padGbc.weightx = 1;
        padGbc.weighty = 1;
        padGbc.gridx = 1;
        padGbc.gridy = 9999;
        contentPanel.add(new JPanel(), padGbc);
    }

    @Override
    public void onTaskAdded(Task task) {
        TaskProgressPanel panel = new TaskProgressPanel(task);
        taskPanels.put(task, panel);
        gbc.gridy++;
        contentPanel.add(panel, gbc);
        this.revalidate();
        this.repaint();
    }

    @Override
    public void onTaskRemoved(Task task) {
        TaskProgressPanel panel = taskPanels.remove(task);
        if(panel == null) return;
        panel.cleanup();
        contentPanel.remove(panel);
        this.revalidate();
        this.repaint();
    }

    @Override
    public void onTaskException(Task task, Throwable throwable) {

    }
}
