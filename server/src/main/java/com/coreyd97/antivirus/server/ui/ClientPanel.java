package com.coreyd97.antivirus.server.ui;

import com.coreyd97.antivirus.server.clients.Client;
import com.coreyd97.antivirus.server.clients.ClientManager;
import com.coreyd97.antivirus.server.clients.IClientListener;

import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.util.HashMap;

public class ClientPanel extends JScrollPane implements IClientListener {

    private ClientManager clientManager;
    private JPanel contentPanel;
    private HashMap<Client, JPanel> clientPanels;
    private GridBagConstraints gbc;


    public ClientPanel(ClientManager clientManager){
        this.clientManager = clientManager;
        this.clientManager.addClientListener(this);
        this.contentPanel = new JPanel(new GridBagLayout());
        this.setViewportView(this.contentPanel);
        this.clientPanels = new HashMap<>();

        this.gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.BOTH;
        gbc.weightx = 1;
        gbc.weighty = 0;
        gbc.gridx = gbc.gridy = 1;

        GridBagConstraints padGbc = new GridBagConstraints();
        padGbc.fill = GridBagConstraints.BOTH;
        padGbc.weightx = 1;
        padGbc.weighty = 1;
        padGbc.gridx = 1;
        padGbc.gridy = 9999;
        contentPanel.add(new JPanel(), padGbc);

        for (Client client : this.clientManager.getClients()) {
            addClientPanel(client);
        }
    }

    @Override
    public void onClientBanned(Client client) {
        addClientPanel(client);
    }

    @Override
    public void onClientUnbanned(Client client) {
        addClientPanel(client);
    }

    @Override
    public void onClientConnected(Client client) {
        addClientPanel(client);
    }

    private void addClientPanel(Client client){
        JPanel clientPanel = clientPanels.get(client);
        GridBagConstraints panelConstraints;
        if(clientPanel != null){
            GridBagLayout layout = (GridBagLayout) this.contentPanel.getLayout();
            panelConstraints = layout.getConstraints(clientPanel);
            this.contentPanel.remove(clientPanel);
        }else{
            panelConstraints = this.gbc;
            panelConstraints.gridy++;
        }

        clientPanel = createPanel(client);
        this.clientPanels.put(client, clientPanel);
        this.contentPanel.add(clientPanel, panelConstraints);
        this.revalidate();
        this.repaint();
    }

    private JPanel createPanel(Client client){
        JPanel panel = new JPanel(new GridBagLayout());
        JPanel wrapperPanel = new JPanel(new GridBagLayout());
        GridBagConstraints wrapperPanelGbc = new GridBagConstraints();
        wrapperPanelGbc.insets = new Insets(10, 10, 0, 10);
        wrapperPanelGbc.fill = GridBagConstraints.BOTH;
        wrapperPanelGbc.weightx = 1;
        wrapperPanel.add(panel, wrapperPanelGbc);

        GridBagConstraints clientPanelGbc = new GridBagConstraints();
        clientPanelGbc.ipadx = clientPanelGbc.ipady = 7;
        clientPanelGbc.gridx = clientPanelGbc.gridy = 1;
        clientPanelGbc.fill = GridBagConstraints.BOTH;

        clientPanelGbc.weightx = 0;
        panel.add(new JLabel("IP Address: "), clientPanelGbc);
        JLabel clientIP = new JLabel(client.getAddress().getHostAddress());
        clientPanelGbc.gridx++;
        panel.add(clientIP, clientPanelGbc);

        clientPanelGbc.weightx = 1;
        clientPanelGbc.gridx++;
        panel.add(new JLabel(), clientPanelGbc);
        clientPanelGbc.weightx = 0;
        clientPanelGbc.gridx++;

        if(client.getStatus() == Client.Status.BANNED){
            clientIP.setForeground(Color.RED);
            JButton unban = new JButton("Unban");
            panel.add(unban, clientPanelGbc);
            unban.addActionListener(actionEvent -> {
                this.clientManager.unbanClient(client.getAddress());
            });
        }else{
            Color c = new Color(61, 140, 31);
            clientIP.setForeground(c);
            JButton ban = new JButton("Ban");
            panel.add(ban, clientPanelGbc);
            ban.addActionListener(actionEvent -> {
                this.clientManager.banClient(client.getAddress());
            });
        }

        return wrapperPanel;

    }
}
