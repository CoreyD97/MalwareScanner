package com.coreyd97.antivirus.server.engine;

import com.coreyd97.antivirus.common.report.ReportHandler;
import com.coreyd97.antivirus.common.report.ResultsReport;
import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.taskscheduler.AnalysisTask;
import com.coreyd97.antivirus.common.taskscheduler.TaskScheduler;
import com.coreyd97.antivirus.server.network.ServerNetworkController;
import org.reflections.Reflections;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.HashMap;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.Future;
import java.util.logging.Logger;

public class AnalysisManager implements ReportHandler<ResultsReport> {
    private final ServerNetworkController networkController;
    private final TaskScheduler taskScheduler;
    private HashMap<String, AnalysisModule> analysisModules;
    private HashMap<UUID, ResultsReport> resultsReports;

    public AnalysisManager(ServerNetworkController serverNetworkController, TaskScheduler taskScheduler) {
        this.networkController = serverNetworkController;
        this.taskScheduler = taskScheduler;
//        this.activeAnalysisTasks = new HashMap<>();
        this.resultsReports = new HashMap<>();
        loadDetectionModules();
    }

    //Register request for a scan with the scheduler. This will be executed when scheduler is ready.
    public Future<ResultsReport> requestAnalysis(ScanReport scanReport) throws UnknownModuleException {
        AnalysisModule detectionModule = analysisModules.get(scanReport.getDetectionModule());
        if(detectionModule == null){ throw new UnknownModuleException(scanReport.getDetectionModule()); }
        AnalysisTask analysisTask = detectionModule.processReport(scanReport);
        analysisTask.setReportHandler(this);
        return taskScheduler.submitFutureTask(analysisTask, false);
    }

    @Override
    public void onReportReady(ResultsReport report) {
        resultsReports.put(report.getUUID(), report);
        if(report.getFoundMalware().size() > 0){
            //TODO Malware Detected! Quarantine the system.
        }else{
            //TODO Simplify results reports which are clean.
        }
    }

//    @Override
//    public void onTaskStart(Task task, int steps) {
//        activeAnalysisTasks.put(task.getUUID(), (AnalysisTask) task);
//    }
//
//    @Override
//    public void onTaskStepsAdded(Task task, int steps) {}
//
//    @Override
//    public void onTaskProgress(Task task) {}
//
//    @Override
//    public void onTaskComplete(Task task) {
//        activeAnalysisTasks.remove(task.getUUID());
//    }

    public ResultsReport getReport(UUID uuid){
        return resultsReports.remove(uuid);
    }

    private void loadDetectionModules() {
        this.analysisModules = new HashMap<>();
        Reflections reflections = new Reflections("com.coreyd97.antivirus.server.engine");
        Set<Class<? extends AnalysisModule>> analysisModule = reflections.getSubTypesOf(AnalysisModule.class);
        for (Class<? extends AnalysisModule> module : analysisModule) {
            if(Modifier.isAbstract(module.getModifiers())) continue;
            String name; //Try to get engine name defined in class. Otherwise use file name.
            try {
                Field f = module.getField("engineName");
                name = (String) f.get(null);
            } catch (NoSuchFieldException | IllegalAccessException e) {
                name = module.getName();
            }
            AnalysisModule instance;
            try {
                instance = module.newInstance();
                this.analysisModules.put(name, instance);
            } catch (InstantiationException | IllegalAccessException e) {
                Logger.getLogger("AnalysisManager").warning("Analysis module " + name + " could not be loaded!");
            }
        }
    }

    public AnalysisModule getAnalysisModule(String analysisModule){
        if(this.analysisModules != null) return this.analysisModules.get(analysisModule);
        else return null;
    }

}

