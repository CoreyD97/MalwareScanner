package com.coreyd97.antivirus.server.engine;

import com.coreyd97.antivirus.common.engine.YaraManager;
import com.coreyd97.antivirus.common.report.ReportHandler;
import com.coreyd97.antivirus.common.report.ResultsReport;
import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.taskscheduler.AnalysisTask;
import com.coreyd97.antivirus.common.taskscheduler.TaskScheduler;
import com.coreyd97.antivirus.server.DatabaseEngine;
import com.coreyd97.antivirus.server.network.ClientManager;
import com.coreyd97.antivirus.server.taskscheduler.BanClientTask;
import com.coreyd97.antivirus.server.taskscheduler.ExplainTask;
import org.reflections.Reflections;

import java.io.File;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.net.Inet4Address;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;
import java.util.UUID;
import java.util.logging.Logger;

public class AnalysisManager implements ReportHandler<ResultsReport> {
    private final TaskScheduler taskScheduler;
    private final ClientManager clientManager;
    private final DatabaseEngine databaseEngine;
    private final YaraManager yaraManager;

    private HashMap<String, AnalysisModule> analysisModules;
    private HashMap<UUID, ResultsReport> resultsReports;
    private HashMap<UUID, Inet4Address> reportOwners;

    public AnalysisManager(TaskScheduler taskScheduler, ClientManager clientManager, DatabaseEngine databaseEngine) {
        this.taskScheduler = taskScheduler;
        this.clientManager = clientManager;
        this.databaseEngine = databaseEngine;
        this.yaraManager = new YaraManager(new File[]{new File("config/rules/index.yar")});
        this.resultsReports = new HashMap<>();
        this.reportOwners = new HashMap<>();
        loadDetectionModules();
    }

    //Register request for a scan with the scheduler. This will be executed when scheduler is ready.
    public void requestAnalysis(ScanReport scanReport, Inet4Address clientAddress) throws UnknownModuleException {
        AnalysisModule detectionModule = analysisModules.get(scanReport.getDetectionModule());
        if(detectionModule == null){ throw new UnknownModuleException(scanReport.getDetectionModule()); }
        AnalysisTask analysisTask = detectionModule.processReport(scanReport);
        if(analysisTask != null) {
            analysisTask.setReportHandler(this);
            this.reportOwners.put(scanReport.getUUID(), clientAddress);
            taskScheduler.execute(analysisTask);
        }
    }

    public void requestExplanation(ScanReport scanReport) throws UnknownModuleException {
        AnalysisModule detectionModule = analysisModules.get(scanReport.getDetectionModule());
        if(detectionModule == null){ throw new UnknownModuleException(scanReport.getDetectionModule()); }
        ExplainTask explainTask = detectionModule.explain(scanReport);
        if(explainTask != null) {
            explainTask.setReportHandler(this);
            taskScheduler.execute(explainTask);
        }
    }

    @Override
    public void onReportReady(ResultsReport report) {
        resultsReports.put(report.getUUID(), report);
        if(report.getFoundMalware().size() > 0){
            Inet4Address reportOwner = reportOwners.get(report.getUUID());
            if(reportOwner == null){
                //Unknown report owner
            }else{
                clientManager.banClient(reportOwner);
            }
        }
    }

    public ResultsReport getReport(UUID uuid, Inet4Address client){
        ResultsReport resultsReport = resultsReports.get(uuid);
        if(resultsReport == null) return null; //Report not processed.

        Inet4Address owner = reportOwners.get(uuid);
        if(owner == null){
            //Unknown report owner.
        }else {
            if (client.equals(reportOwners.get(uuid))) {
                reportOwners.remove(uuid);
                return resultsReport;
            } else {
                //Not the owner!
            }
        }
        return null;
    }

    private void loadDetectionModules() {
        this.analysisModules = new HashMap<>();
        Reflections reflections = new Reflections("com.coreyd97.antivirus.server.engine");
        Set<Class<? extends AnalysisModule>> analysisModule = reflections.getSubTypesOf(AnalysisModule.class);
        for (Class<? extends AnalysisModule> module : analysisModule) {
            if(Modifier.isAbstract(module.getModifiers())) continue;
            String name; //Try to get engine taskName defined in class. Otherwise use file taskName.
            try {
                Field f = module.getField("engineName");
                name = (String) f.get(null);
            } catch (NoSuchFieldException | IllegalAccessException e) {
                name = module.getName();
            }
            AnalysisModule instance;
            try {
                instance = module.getConstructor(AnalysisManager.class).newInstance(this);
                this.analysisModules.put(name, instance);
            } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
                Logger.getLogger("AnalysisManager").warning("Analysis module " + name + " could not be loaded!");
            }
        }
    }

    public AnalysisModule getAnalysisModule(String analysisModule){
        if(this.analysisModules != null) return this.analysisModules.get(analysisModule);
        else return null;
    }

    public ArrayList<AnalysisModule> getAnalysisModules() {
        return new ArrayList<>(analysisModules.values());
    }

    protected YaraManager getYaraManager() {
        return yaraManager;
    }

    protected DatabaseEngine getDatabaseEngine() {
        return databaseEngine;
    }
}

