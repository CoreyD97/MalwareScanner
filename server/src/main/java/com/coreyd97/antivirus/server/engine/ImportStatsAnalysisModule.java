package com.coreyd97.antivirus.server.engine;

import com.coreyd97.antivirus.common.report.FileFeatures;
import com.coreyd97.antivirus.common.report.MalwareEntry;
import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.report.TrainReport;
import com.coreyd97.antivirus.common.taskscheduler.AnalysisTask;
import com.coreyd97.antivirus.common.taskscheduler.TrainTask;
import com.coreyd97.antivirus.common.utils.Utils;
import com.coreyd97.antivirus.server.AntiVirusServer;
import com.github.katjahahn.parser.FileFormatException;
import com.github.katjahahn.parser.PEData;
import com.github.katjahahn.parser.PELoader;
import com.github.katjahahn.parser.sections.SectionLoader;
import com.github.katjahahn.parser.sections.idata.ImportSection;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;

public class ImportStatsAnalysisModule extends AnalysisModule {
    public static final String engineName = "Function Import Heuristic";

    public ImportStatsAnalysisModule(){
        super(engineName, true);
    }

    @Override
    public TrainTask train(Utils.FileStatus fileStatus, File files[]){
        ImportStatsTrainTask trainTask = new ImportStatsTrainTask("Heuristic Training", files, fileStatus);
        return trainTask;
    }

    @Override
    public AnalysisTask processReport(ScanReport scanReport) {
        AnalysisTask analysisTask = new ImportStatsAnalysisTask("Import Stats Report Analysis", scanReport);
        return analysisTask;
    }

    public class ImportStatsTrainTask extends TrainTask {
        Utils.FileStatus fileStatus;
        boolean storeSampleFunctionUsage;

        ImportStatsTrainTask(String taskName, File files[], Utils.FileStatus fileStatus){
            super(taskName, files, ImportStatsAnalysisModule.this);
            this.fileStatus = fileStatus;
            storeSampleFunctionUsage = AntiVirusServer.getInstance().getOptions().getValue("storeFunctionUsage", Boolean.class, false);
        }

        @Override
        protected void processFile(File file) {
            try {
                PEData data = PELoader.loadPE(file);
                ImportSection section;
                Integer sampleID = null;
                if (this.fileStatus == Utils.FileStatus.MALWARE) {
                    if (db.containsSample(file)) {
                        ((TrainReport) this.report).addFailedSample("Sample already present.", file.getAbsolutePath());
                        return;
                    }
                    sampleID = db.addSample(file, fileStatus == Utils.FileStatus.MALWARE);
                }
                SectionLoader sectionLoader = new SectionLoader(data);
                section = sectionLoader.loadImportSection();

                db.storeSampleImports(sampleID, section.getImports(), fileStatus, storeSampleFunctionUsage);
                ((TrainReport) this.report).trainedSamples++;
            } catch (IOException | IllegalStateException e) {
                String cause;
                if (e instanceof FileFormatException) {
                    cause = "Invalid PE32 File. ";
                } else if (e instanceof IllegalStateException) {
                    cause = "Could not find import section. ";
                } else {
                    cause = "Could not open file. ";
                }
                ((TrainReport) this.report).addFailedSample(cause, file.getAbsolutePath());
            } catch (SQLException e) {
                System.err.println(e.getMessage());
            }
        }
    }

    private class ImportStatsAnalysisTask extends AnalysisTask {
        protected ImportStatsAnalysisTask(String taskName, ScanReport report) {
            super(taskName, report);
        }

        @Override
        protected void processFile(FileFeatures fileFeatures) {
            //TODO ProcessReport - Import Stats
            boolean malware = Math.random() >= 0.5;
            if(malware){
                resultsReport.addMalware(new MalwareEntry(fileFeatures.filePath, 0.5, "Just a 50/50 guess!"));
            }
        }
    }

}
