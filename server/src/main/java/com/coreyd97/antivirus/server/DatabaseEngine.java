package com.coreyd97.antivirus.server;

import com.coreyd97.antivirus.common.utils.Utils;
import com.github.katjahahn.parser.sections.idata.ImportDLL;
import com.github.katjahahn.parser.sections.idata.NameImport;
import com.github.katjahahn.parser.sections.idata.OrdinalImport;

import java.io.File;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.*;
import java.util.List;

/**
 * The type Database engine.
 */
public class DatabaseEngine {
    private static DatabaseEngine instance;
    private static String dllSelect = "SELECT DLLID FROM DLL WHERE DLLName=?";
    private static String dllInsert = "INSERT INTO DLL VALUES(NULL, ?)";
    private static String functionUsageInsert = "INSERT INTO FunctionUsage VALUES(?,?)";
    private static String functionSelect = "SELECT FunctionID FROM Functions WHERE DLLID=? AND FunctionName=? LIMIT 1";
    private static String functionInsert = "INSERT INTO Functions VALUES (NULL, ?, ?, ?, ?)";
    private static String sampleSelect = "SELECT SampleID FROM Samples WHERE MD5=? AND KbSize=? LIMIT 1";
    private static String sampleInsert = "INSERT INTO Samples VALUES(NULL, ?, ?, ?, ?)";
    public static String trainedUpdateClean = "UPDATE Training SET CleanSamples=CleanSamples+? WHERE Module=?";
    public static String trainedUpdateMalware = "UPDATE Training SET MalwareSamples=MalwareSamples+? WHERE Module=?";
    private static String trainedInsert = "INSERT INTO Training VALUES(?,?,?)";
    private Connection connection;
    private String trainedCountManualQuery;

    public static DatabaseEngine getInstance() {
        if(instance == null) try {
            instance = new DatabaseEngine();
        } catch (SQLException | ClassNotFoundException e) {
            System.err.println("Failed to establish database connection.\n" + e.getMessage());
            System.exit(0);
        }
        return instance;
    }

    public DatabaseEngine() throws SQLException, ClassNotFoundException {
        Class.forName("org.h2.Driver");
        connection = DriverManager.getConnection("jdbc:h2:./config/MalwareDatabase", "sa", "");
        Statement statement = connection.createStatement();
        statement.close();
        createTables();
    }


    private void createTables() throws SQLException {
        Statement statement = connection.createStatement();
        statement.executeUpdate("CREATE TABLE IF NOT EXISTS Samples(SampleID INT AUTO_INCREMENT PRIMARY KEY, SampleName VARCHAR (255), MD5 CHAR(32), SHA1 CHAR(40), KbSize INT)");
        statement.executeUpdate("CREATE TABLE IF NOT EXISTS DLL(DLLID INT AUTO_INCREMENT PRIMARY KEY, DLLName VARCHAR(255))");
        statement.executeUpdate("CREATE TABLE IF NOT EXISTS Functions(FunctionID INT AUTO_INCREMENT, DLLID INT, FunctionName CLOB, Clean INT, Dirty INT, PRIMARY KEY (FunctionID), FOREIGN KEY (DLLID) REFERENCES DLL(DLLID))");
        statement.executeUpdate("CREATE TABLE IF NOT EXISTS FunctionUsage(SampleID INT, FunctionID INT, FOREIGN KEY (SampleID) REFERENCES Samples(SampleID), FOREIGN KEY (FunctionID) REFERENCES Functions(FunctionID))");
        statement.executeUpdate("CREATE TABLE IF NOT EXISTS Training(MODULE VARCHAR(128) PRIMARY KEY , CLEANSAMPLES INTEGER DEFAULT 0, MALWARESAMPLES INTEGER DEFAULT 0)");
        statement.close();
    }

    public void shutdown() {
        try {
            if (connection != null)
                connection.close();
        }catch (SQLException e){}
    }

    public boolean containsSample(int fileSize, Utils.HashType hashType, String hash) throws SQLException {
        PreparedStatement stmt;
        switch (hashType) {
            case MD5: stmt = connection.prepareStatement("SELECT SampleID FROM Samples WHERE MD5=? AND KbSize=? LIMIT 1");
                break;
            case SHA1: stmt = connection.prepareStatement("SELECT SampleID FROM Samples WHERE SHA1=? AND KbSize=? LIMIT 1");
                break;
            default: return false;
        }
        stmt.setString(1, hash);
        stmt.setInt(2, fileSize);
        ResultSet results = stmt.executeQuery();
        return results.next();
    }

    public boolean containsSample(File file) throws SQLException, IOException {
        PreparedStatement stmt = connection.prepareStatement(sampleSelect);
        try {
            stmt.setString(1, Utils.fileChecksum(MessageDigest.getInstance("MD5"), file));
        } catch (NoSuchAlgorithmException e) { e.printStackTrace(); }
        stmt.setInt(2, Math.round(file.length() / 1024));
        ResultSet results = stmt.executeQuery();
        return results.next();
    }

    //Add a sample to the database and return the sampleid.
    public int addSample(File file) throws SQLException, IOException {
        PreparedStatement stmt = connection.prepareStatement(sampleInsert, Statement.RETURN_GENERATED_KEYS);
        stmt.setString(1, file.getName());
        try {
            stmt.setString(2, Utils.fileChecksum(MessageDigest.getInstance("MD5"), file));
            stmt.setString(3, Utils.fileChecksum(MessageDigest.getInstance("SHA1"), file));
        } catch (NoSuchAlgorithmException e) { e.printStackTrace(); }
        stmt.setInt(4, Math.round(file.length() / 1024));
        stmt.executeUpdate();
        ResultSet results = stmt.getGeneratedKeys();
        if(results.next()){
            return results.getInt(1);
        }else{
            throw new SQLException("Sample was not added to database!");
        }
    }

    public void addTrainedCount(String module, int count, Utils.FileStatus fileStatus) throws SQLException {
        PreparedStatement stmt;
        if(fileStatus == Utils.FileStatus.CLEAN) {
            stmt = connection.prepareStatement(trainedUpdateClean);
        }else{
            stmt = connection.prepareStatement(trainedUpdateMalware);
        }

        stmt.setString(2, module);
        stmt.setInt(1, count);
        if(stmt.executeUpdate() == 0){
            //No row to update, insert new row instead.
            stmt = connection.prepareStatement(trainedInsert);
            stmt.setString(1, module);
            if(fileStatus == Utils.FileStatus.CLEAN) {
                stmt.setInt(2, count);
                stmt.setInt(3, 0);
            }else{
                stmt.setInt(2, 0);
                stmt.setInt(3, count);
            }
            stmt.executeUpdate();
        }
    }


    /**
     * Store sample imports.
     *
     * @param sampleID           the sample id or null
     * @param imports            the list of imports
     * @param fileStatus         the file status
     * @param storeFunctionUsage weather to store the functions the sample used
     * @throws SQLException if an sql error occurred.
     */
    public void storeSampleImports(Integer sampleID, List<ImportDLL> imports, Utils.FileStatus fileStatus, boolean storeFunctionUsage) throws SQLException{
        PreparedStatement stmt;
        for (ImportDLL dll : imports) {
            Integer dllID;
            stmt = connection.prepareStatement(dllSelect);
            stmt.setString(1, dll.getName());
            ResultSet results = stmt.executeQuery();
            if(results.next()){
                dllID = results.getInt(1);
            }else{
                stmt = connection.prepareStatement(dllInsert);
                stmt.setString(1, dll.getName());
                stmt.executeUpdate();
                results = stmt.getGeneratedKeys();
                results.next();
                dllID = results.getInt(1);
            }

            for (NameImport nameImport : dll.getNameImports()) {
                int functionID = addOrUpdateFunction(dllID, nameImport.getName(), fileStatus);
                if(storeFunctionUsage) {
                    stmt = connection.prepareStatement(functionUsageInsert);
                    stmt.setInt(1, sampleID);
                    stmt.setInt(2, functionID);
                    stmt.executeUpdate();
                }
            }

            for (OrdinalImport ordinalImport : dll.getOrdinalImports()){
                String ordName = "ORD: " + ordinalImport.getOrdinal();
                if(storeFunctionUsage) {
                    int functionID = addOrUpdateFunction(dllID, ordName, fileStatus);
                    stmt = connection.prepareStatement(functionUsageInsert);
                    stmt.setInt(1, sampleID);
                    stmt.setInt(2, functionID);
                    stmt.executeUpdate();
                }
            }
        }
    }



    //Add a dll function to the db or update if exists.
    //Returns the functionid
    private int addOrUpdateFunction(int dllID, String functionName, Utils.FileStatus fileStatus) throws SQLException{
        String statField = fileStatus.toString();
        PreparedStatement stmt = connection.prepareStatement(functionSelect);
        stmt.setInt(1, dllID);
        stmt.setString(2, functionName);
        stmt.execute();
        ResultSet results = stmt.getResultSet();
        int functionID;
        if(results.next()){
            //Function exists
            functionID = results.getInt(1);
            String functionUpdate = "UPDATE Functions Set " + statField + "=" + statField + "+1 WHERE FunctionID=?";
            stmt = connection.prepareStatement(functionUpdate);
            stmt.setInt(1, functionID);
            int updated = stmt.executeUpdate();
            if(updated != 1) throw new SQLException("Existing Function entry was not updated!");
        }else{
            //Function does not yet exist
            stmt = connection.prepareStatement(functionInsert, Statement.RETURN_GENERATED_KEYS);
            stmt.setInt(1, dllID);
            stmt.setString(2, functionName);
            stmt.setInt(3, fileStatus == Utils.FileStatus.CLEAN ? 1 : 0);
            stmt.setInt(4, fileStatus == Utils.FileStatus.MALWARE ? 1 : 0);
            stmt.executeUpdate();
            results = stmt.getGeneratedKeys();
            if(results.next()){
                functionID = results.getInt(1);
            }else{
                throw new SQLException("Function entry was not inserted!");
            }
        }
        return functionID;
    }

    public Connection getConnection() {
        return connection;
    }

    public String getTrainedCountManualQuery(String module, int count, Utils.FileStatus fileStatus) throws SQLException {
        String stmt = (fileStatus == Utils.FileStatus.CLEAN) ? trainedUpdateClean : trainedUpdateMalware;
        stmt = stmt.replaceFirst("\\?", String.valueOf(count));
        stmt = stmt.replaceFirst("\\?", module);
        return stmt;
    }
}
