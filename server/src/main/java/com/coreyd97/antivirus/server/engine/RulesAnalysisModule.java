package com.coreyd97.antivirus.server.engine;

import com.coreyd97.antivirus.common.report.FileFeatures;
import com.coreyd97.antivirus.common.report.MalwareEntry;
import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.taskscheduler.AnalysisTask;
import com.coreyd97.antivirus.common.taskscheduler.TrainTask;
import com.coreyd97.antivirus.common.utils.ScannerEngineUtils;
import com.coreyd97.antivirus.common.utils.Utils;
import com.coreyd97.antivirus.server.AntiVirusServer;
import com.coreyd97.antivirus.server.DatabaseEngine;
import com.github.plusvic.yara.*;
import com.github.plusvic.yara.embedded.YaraLibrary;

import java.io.File;
import java.io.IOException;
import java.sql.*;
import java.util.List;
import java.util.logging.Logger;

public class RulesAnalysisModule extends AnalysisModule {
    public static final String engineName = "Yara Rule Engine";
    private YaraLibrary library;
    private YaraCompiler compiler;
    private Yara yara;
    private DatabaseEngine db;
    private boolean isSetup;

    public RulesAnalysisModule() {
        super(engineName, true);
    }

    public void setup(DatabaseEngine db){
        this.yara = YaraFactory.create(YaraFactory.Mode.EMBEDDED);
        this.compiler = yara.createCompiler();
        this.db = db;

        String createRulesTable = "CREATE TABLE IF NOT EXISTS YaraRules(ID int AUTO_INCREMENT PRIMARY KEY, RuleName CHAR(64))";
        String createMatchTable = "CREATE TABLE IF NOT EXISTS YaraMatches(RuleID INT,SampleID INT," +
                "    CONSTRAINT YaraMatches_RuleID_SampleID_pk PRIMARY KEY (RuleID, SampleID)," +
                "    CONSTRAINT YaraMatches_YARARULES_ID_fk FOREIGN KEY (RuleID) REFERENCES YARARULES (ID)," +
                "    CONSTRAINT YaraMatches_SAMPLES_SAMPLEID_fk FOREIGN KEY (SampleID) REFERENCES SAMPLES (SAMPLEID))";
        Connection conn = db.getConnection();
        try {
            Statement statement = conn.createStatement();
            statement.executeUpdate(createRulesTable);
            statement.executeUpdate(createMatchTable);
        } catch (SQLException e) {}

        ScannerEngineUtils.RuleImportTask ruleImportTask = new ScannerEngineUtils.RuleImportTask(new File[]{new File("config/rules/index.yar")}, this, yara, compiler);
        ruleImportTask.run();
        isSetup = true;
    }

    private void setup() {
        this.setup(AntiVirusServer.getInstance().getDatabaseEngine());
    }


    @Override
    public TrainTask train(Utils.FileStatus fileStatus, File[] files) {
        RuleTrainTask trainTask = new RuleTrainTask("Yara Rule Training", files, fileStatus);
        return trainTask;
    }

    @Override
    public AnalysisTask processReport(ScanReport scanReport) {
        AnalysisTask analysisTask = new RuleAnalysisTask("Yara Rule Analysis", scanReport);
        return analysisTask;
    }

    private class RuleAnalysisTask extends AnalysisTask {

        protected RuleAnalysisTask(String taskName, ScanReport report) {
            super(taskName, report);
        }

        @Override
        public void processFile(FileFeatures fileFeatures) throws SQLException {
            //TODO Cache calculated scores.
            float total = 0;
            for (String ruleName : ((List<String>) fileFeatures.featureList)) {

            }

            if(total < 0) {
                resultsReport.addMalware(new MalwareEntry(fileFeatures.filePath, -total*100, ""));
            }
        }

        @Override
        public void run() {
            if(!RulesAnalysisModule.this.isSetup){
                setup();
            }
            super.run();
        }
    }


    private class RuleTrainTask extends TrainTask {
        Utils.FileStatus fileStatus;
        YaraScanner scanner;
        int trainedCount = 0;


        protected RuleTrainTask(String taskName, File[] files, Utils.FileStatus fileStatus) {
            super(taskName, files, RulesAnalysisModule.this);
            this.fileStatus = fileStatus;
        }

        @Override
        protected void processFile(File file){
            try {
                int sampleID = db.addSample(file, fileStatus == Utils.FileStatus.MALWARE);
                scanner.scan(file, null, yaraRule -> {
                    try {
                        int ruleID = getRuleID(yaraRule);
                        addRuleMatch(sampleID, ruleID);
                    } catch (SQLException e) {}
                });
                this.report.trainedSamples++;
                trainedCount++;
            }catch (YaraException | SQLException | IOException e){
                this.report.failedSamples++;
            }
        }

        @Override
        public void run() {
            if(!RulesAnalysisModule.this.isSetup){
                setup();
            }
            scanner = compiler.createScanner();
            super.run();
            try {
                db.addTrainedCount(RulesAnalysisModule.engineName, trainedCount, this.fileStatus);
            } catch (SQLException e) {
                Logger.getAnonymousLogger().warning("Total trained sample count could not be updated! Please execute manually to maintain accuracy of the system.");
                try {
                    Logger.getAnonymousLogger().warning(db.getTrainedCountManualQuery(RulesAnalysisModule.engineName, trainedCount, this.fileStatus));
                } catch (SQLException e1) {
                    e.printStackTrace();
                }
            }
        }
    }


    /**
     * Finds the id for a yara rule or inserts into the table and returns the generated row id.
     * @param rule The rule to be searched for
     * @return int the identifier for the rule.
     */
    private int getRuleID(YaraRule rule) throws SQLException{
        PreparedStatement stmt = db.getConnection().prepareStatement("SELECT id from YARARULES WHERE RULENAME=? LIMIT 1");
        stmt.setString(1, rule.getIdentifier());
        ResultSet results = stmt.executeQuery();
        if(results.next()){
            return results.getInt(1);
        }else{
            stmt = db.getConnection().prepareStatement("INSERT INTO YARARULES VALUES (NULL, ?)", PreparedStatement.RETURN_GENERATED_KEYS);
            stmt.setString(1, rule.getIdentifier());
            stmt.executeUpdate();
            results = stmt.getGeneratedKeys();
            if(results.next()){
                return results.getInt(1);
            }
        }
        return -1;
    }

    private boolean addRuleMatch(int sampleID, int ruleID) throws SQLException{
        PreparedStatement stmt = db.getConnection().prepareStatement("INSERT INTO YARAMATCHES VALUES(?,?)");
        stmt.setInt(1, ruleID);
        stmt.setInt(2, sampleID);
        int effectedRows = stmt.executeUpdate();
        return effectedRows != 0;
    }

    private boolean matchesRule(int sampleID, int ruleID) throws SQLException{
        PreparedStatement stmt = db.getConnection().prepareStatement("SELECT EXISTS(SELECT 1 FROM YARAMATCHES WHERE SAMPLEID=? AND RULEID=? LIMIT 1)");
        stmt.setInt(1, sampleID);
        stmt.setInt(2, ruleID);
        ResultSet rs = stmt.executeQuery();
        return rs.getBoolean(1);
    }

}
