package com.coreyd97.antivirus.server.network;

import com.coreyd97.antivirus.common.network.ClientConnection;
import com.coreyd97.antivirus.common.network.ServerThread;
import com.coreyd97.antivirus.common.report.IReportAdapter;
import com.coreyd97.antivirus.common.report.Report;
import com.coreyd97.antivirus.common.report.ResultsReport;
import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.server.clients.ClientManager;
import com.coreyd97.antivirus.server.engine.AnalysisManager;
import com.coreyd97.antivirus.server.engine.UnknownModuleException;
import com.google.gson.*;
import org.apache.commons.codec.DecoderException;

import java.io.*;
import java.net.Inet4Address;
import java.net.Socket;
import java.security.GeneralSecurityException;
import java.util.UUID;
import java.util.logging.Logger;

public class AVClientConnection extends ClientConnection {
    private ClientManager clientManager;
    private AnalysisManager analysisManager;

    public AVClientConnection(ServerThread serverThread, Socket clientSocket) throws IOException {
        super(serverThread, clientSocket);
        this.clientManager = ((AVClientHandler) this.getServerThread()).getClientManager();
        this.analysisManager = ((AVClientHandler) this.getServerThread()).getAnalysisManager();
    }

    @Override
    protected void interact() throws GeneralSecurityException, IOException, DecoderException {
        this.clientManager.addNewClient((Inet4Address) getClientAddress());

        String line;
        while(!this.isClosed()){
            line = readLine();
            if(line == null) continue;
            switch(line){
                case "Identify": {
                    send("CerberusAVServer");
                    endConnection();
                    break;
                }
                case "Analyse": {
                    JsonParser jsonParser = new JsonParser();
                    line = readLine();
                    try{
                        JsonObject jsonObject = (JsonObject) jsonParser.parse(line);
                        if(jsonObject.get("type").getAsString().equals("ScanReport")){
                            ScanReport scanReport = new Gson().fromJson(line,ScanReport.class);

                            //Submit for analysis
                            Logger.getLogger("ANALYSIS").info("Scan Report Received - " + scanReport.getUUID());
                            this.analysisManager.requestAnalysis(scanReport, (Inet4Address) getClientAddress());
                            send("ACCEPT " + scanReport.getUUID());
                        }else{
                            send("DENY The submitted scanReport was not a ScanReport!");
                        }
                    }catch (JsonParseException parseException){
                        send("DENY Could not parse the received ScanReport!");
                    } catch (UnknownModuleException moduleException) {
                        send("DENY " + moduleException.getMessage());
                    }
                    endConnection();
                    break;
                }
                case "Explain": {
                    JsonParser jsonParser = new JsonParser();
                    line = readLine();
                    try{
                        JsonObject jsonObject = (JsonObject) jsonParser.parse(line);
                        if(jsonObject.get("type").getAsString().equals("ScanReport")){
                            ScanReport scanReport = new Gson().fromJson(line,ScanReport.class);

                            //Submit for analysis
                            Logger.getLogger("Explain").info("Scan Report Received - " + scanReport.getUUID());
                            this.analysisManager.requestExplanation(scanReport);
                            send("ACCEPT " + scanReport.getUUID());
                        }else{
                            send("DENY The submitted scanReport was not a ScanReport!");
                        }
                    }catch (JsonParseException parseException){
                        send("DENY Could not parse the received ScanReport!");
                    } catch (UnknownModuleException moduleException) {
                        send("DENY " + moduleException.getMessage());
                    }
                    endConnection();
                    break;
                }
                case "Results": {
                    while (!(line = readLine()).equals("END")) {
                        UUID uuid = UUID.fromString(line);
                        ResultsReport resultsReport = analysisManager.getReport(uuid, (Inet4Address) getClientAddress());
                        if (resultsReport == null) {
                            send("PENDING");
                        } else {
                            Gson gson = new GsonBuilder().registerTypeAdapter(Report.class, new IReportAdapter()).create();
                            send(gson.toJson(resultsReport, Report.class));
                        }
                    }
                    endConnection();
                    break;
                }
            }
        }
    }

    public static class ClientNetworkException extends IOException{}
}