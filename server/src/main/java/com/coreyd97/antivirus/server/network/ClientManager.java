package com.coreyd97.antivirus.server.network;

import com.coreyd97.antivirus.common.network.ServerConnectionHandler;
import com.coreyd97.antivirus.common.stats.StatProvider;
import com.coreyd97.antivirus.common.taskscheduler.TaskScheduler;
import com.coreyd97.antivirus.server.taskscheduler.BanClientTask;
import com.coreyd97.antivirus.server.taskscheduler.UnbanClientTask;

import javax.swing.*;
import java.net.Inet4Address;
import java.util.HashMap;

public class ClientManager implements StatProvider {

    private final HashMap<Inet4Address, Client> clients;
    private final ServerConnectionHandler firewallConnection;
    private final TaskScheduler taskScheduler;

    public ClientManager(ServerConnectionHandler firewallConnection, TaskScheduler taskScheduler){
        clients = new HashMap<>();
        this.firewallConnection = firewallConnection;
        this.taskScheduler = taskScheduler;
    }

    public boolean clientExists(Inet4Address address){
        return clients.containsKey(address);
    }

    public Client addNewClient(Inet4Address address){
        clients.put(address, new Client(address));
        return clients.get(address);
    }

    public void banClient(Inet4Address address){
        Client client = clients.get(address);
        if(client == null){
            client = addNewClient(address);
        }

        BanClientTask banTask = new BanClientTask(this.firewallConnection, client.address);
        Client finalClient = client;
        banTask.setCallback(() -> {
            if(banTask.getResult()){
                finalClient.status = Client.Status.BANNED;
            }else{
                //Not Banned, flag for manual ban?
            }
        });
        taskScheduler.execute(banTask);
    }

    public void unbanClient(Inet4Address address){
        Client client = clients.get(address);
        if(client == null){
            client = addNewClient(address);
        }

        UnbanClientTask banTask = new UnbanClientTask(this.firewallConnection, client.address);
        Client finalClient = client;
        banTask.setCallback(() -> {
            if(banTask.getResult()){
                finalClient.status = Client.Status.BANNED;
            }else{
                //Not Banned, flag for manual ban?
            }
        });
        taskScheduler.execute(banTask);
    }


    JPanel statPanel;
    @Override
    public JPanel getStatPanel() {
        if(statPanel == null){
            statPanel = new JPanel();
        }
        return statPanel;
    }
}
