package com.coreyd97.antivirus.server.engine;

import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.taskscheduler.AnalysisTask;
import com.coreyd97.antivirus.common.utils.ScannerEngineUtils;
import com.coreyd97.antivirus.server.AntiVirusServer;
import com.coreyd97.antivirus.server.DatabaseEngine;
import com.coreyd97.antivirus.common.utils.Utils;
import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.report.TrainReport;
import com.coreyd97.antivirus.common.taskscheduler.FileTask;
import com.github.plusvic.yara.*;
import com.github.plusvic.yara.embedded.YaraLibrary;

import java.io.File;
import java.sql.*;

public class RulesEngine extends ServerScannerEngine {
    public static final String engineName = "Yara Rule Engine";
    private YaraLibrary library;
    private YaraCompiler compiler;
    private Yara yara;
    private DatabaseEngine db;

    public RulesEngine() {
        super(engineName, true);
        this.yara = YaraFactory.create(YaraFactory.Mode.EMBEDDED);
        this.compiler = yara.createCompiler();
        this.db = AntiVirusServer.getInstance().getDatabaseEngine();

        new Thread(){
            @Override
            public void run() {
                setup();
                try {
                    TrainReport report = importRules(new File[]{new File("config/rules/index.yar")}).call();
//                    reports.display();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }.start();
    }

    private void setup() {
        String createRulesTable = "CREATE TABLE IF NOT EXISTS YaraRules(RuleName CHAR(64) PRIMARY KEY, Clean INT, Dirty INT)";
        Connection conn = db.getConnection();
        try {
            Statement statement = conn.createStatement();
            statement.executeUpdate(createRulesTable);
        } catch (SQLException e) {}
    }

    private void addRuleMatch(String rulename, Utils.FileStatus fileStatus) throws SQLException {
        Connection connection = db.getConnection();
        PreparedStatement stmt;
        //Function exists
        String ruleUpdate = "UPDATE YaraRules Set " + fileStatus + "=" + fileStatus + "+1 WHERE RuleName=?";
        stmt = connection.prepareStatement(ruleUpdate);
        stmt.setString(1, rulename);
        int updated = stmt.executeUpdate();
        if(updated == 0) {
            //Function does not yet exist
            String ruleInsert = "INSERT INTO YaraRules VALUES (?, ?, ?)";
            stmt = connection.prepareStatement(ruleInsert, Statement.RETURN_GENERATED_KEYS);
            stmt.setString(1, rulename);
            stmt.setInt(2, fileStatus == Utils.FileStatus.CLEAN ? 1 : 0);
            stmt.setInt(3, fileStatus == Utils.FileStatus.DIRTY ? 1 : 0);
            stmt.executeUpdate();
            ResultSet results = stmt.getGeneratedKeys();
            if(!results.next()){
                throw new SQLException("Function entry was not inserted!");
            }
        }
    }

    private class RuleScanTask extends FileTask {
        YaraScanner scanner;
        File activeFile;

        RuleScanTask(File[] files, ScanReport scanReport) {
            super("Yara Rule Scan", files, scanReport);
        }

        @Override
        protected void processFile(File file) {
            try {
                activeFile = file;
                scanner.scan(file);
            }catch (YaraException e){}
        }

        @Override
        public ScanReport call() throws Exception {
            scanner = compiler.createScanner();
            scanner.setCallback(new YaraScanCallback() {
                @Override
                public void onMatch(YaraRule yaraRule) {
                    report.addString(activeFile.getName() + " - " + yaraRule.getIdentifier());
                }
            });
            return (ScanReport) super.call();
        }
    }


    @Override
    public FileTask train(File[] files) {
        Utils.FileStatus fileStatus = Utils.cleanOrDirtyConfirmation();
        RuleTrainTask trainTask = new RuleTrainTask("Yara Rule Training", files, fileStatus, new TrainReport(this));
        AntiVirusServer.getInstance().getTaskScheduler().registerTask(trainTask);
        return trainTask;
    }

    @Override
    public AnalysisTask processReports(ScanReport[] scanReports) {
        return null;
    }

    private class RuleTrainTask extends FileTask {
        Utils.FileStatus fileStatus;
        YaraScanner scanner;

        protected RuleTrainTask(String taskName, File[] files, Utils.FileStatus fileStatus, TrainReport trainReport) {
            super(taskName, files, trainReport);
            this.fileStatus = fileStatus;
        }

        @Override
        protected void processFile(File file) {
            try {
                addRuleMatch("TOTALTRAINEDSAMPLES", fileStatus);
            } catch (SQLException e) {}
            try {
                scanner.scan(file);
            }catch (YaraException e){}
        }

        @Override
        public TrainReport call() throws Exception {
            YaraScanCallback scanCallback = new YaraScanCallback() {
                @Override
                public void onMatch(YaraRule yaraRule) {
                    try {
                        addRuleMatch(yaraRule.getIdentifier(), fileStatus);
                    } catch (SQLException e) {}
                }
            };
            scanner = compiler.createScanner();
            scanner.setCallback(scanCallback);
            TrainReport trainReport = (TrainReport) super.call();
            yara.finalizeThread();
            return trainReport;
        }
    }

    private ScannerEngineUtils.RuleImportTask importRules(File[] files){
        ScannerEngineUtils.RuleImportTask task = new ScannerEngineUtils.RuleImportTask(files, new TrainReport(this), yara, compiler);
        AntiVirusServer.getInstance().getTaskScheduler().registerTask(task);
        return task;
    }


}
