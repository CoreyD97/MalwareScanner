package com.coreyd97.antivirus.server.engine;

import com.coreyd97.antivirus.common.engine.DetectionModule;
import com.coreyd97.antivirus.common.report.FileFeatures;
import com.coreyd97.antivirus.common.report.MalwareEntry;
import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.taskscheduler.AnalysisTask;
import com.coreyd97.antivirus.common.taskscheduler.ScanTask;
import com.coreyd97.antivirus.common.taskscheduler.TrainTask;
import com.coreyd97.antivirus.common.utils.Utils;
import com.coreyd97.antivirus.server.DatabaseEngine;
import com.coreyd97.antivirus.server.taskscheduler.ExplainTask;

import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.HashMap;

public class HashAnalysisModule extends AnalysisModule {
    public static final String engineName = "Hash Scanner";

    private DatabaseEngine databaseEngine;

    public HashAnalysisModule(AnalysisManager analysisManager) {
        super(engineName, true);
        this.databaseEngine = analysisManager.getDatabaseEngine();
    }


    @Override
    public TrainTask train(Utils.FileStatus fileStatus, File[] files) {
        TrainTask trainTask = new HashTrainTask("Hash Module Training", files, fileStatus);
        return trainTask;
    }

    @Override
    public AnalysisTask processReport(ScanReport scanReport) {
        AnalysisTask analysisTask = new HashAnalysisTask("Hash Scan Analysis", scanReport);
        return analysisTask;
    }

    @Override
    public ExplainTask explain(ScanReport scanReport) {
        return null;
    }

    private class HashAnalysisTask extends AnalysisTask {

        protected HashAnalysisTask(String taskName, ScanReport report) {
            super(taskName, report);
        }

        @Override
        public void processFile(FileFeatures fileFeatures) throws SQLException {
            Connection connection = databaseEngine.getConnection(this);
            Utils.HashType hashType = Utils.HashType.valueOf(fileFeatures.featureMap.get(FileFeatures.Feature.HASH_TYPE));
            String hash = fileFeatures.featureMap.get(FileFeatures.Feature.valueOf(hashType.toString()));
            if(DatabaseEngine.isSampleMalicious(connection, hashType, hash)){
                resultsReport.addMalware(new MalwareEntry(fileFeatures.filePath, 100, "Matched existing hash"));
            }
            databaseEngine.releaseConnection(connection);
        }
    }

    private class HashTrainTask extends TrainTask {
        Utils.FileStatus fileStatus;

        protected HashTrainTask(String taskName, File[] files, Utils.FileStatus fileStatus) {
            super(taskName, files);
            this.fileStatus = fileStatus;
        }

        @Override
        protected boolean processFile(File file) {
            Connection connection = databaseEngine.getConnection(this);

            try {
                DatabaseEngine.addSampleIfNotExists(connection, file, fileStatus == Utils.FileStatus.MALWARE);
                result.incrementTrained();
            } catch (SQLException | IOException e) {
                result.incrementFailed();
            }

            databaseEngine.releaseConnection(connection);
            return true;
        }
    }
}
