package com.coreyd97.antivirus.server.engine;

import com.coreyd97.antivirus.common.report.FileFeatures;
import com.coreyd97.antivirus.common.report.MalwareEntry;
import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.taskscheduler.AnalysisTask;
import com.coreyd97.antivirus.common.taskscheduler.ScanTask;
import com.coreyd97.antivirus.common.taskscheduler.TrainTask;
import com.coreyd97.antivirus.common.utils.Utils;

import java.io.File;
import java.sql.SQLException;

public class HashAnalysisModule extends AnalysisModule {
    public static final String engineName = "Hash Scanner";

    public HashAnalysisModule() {
        super(engineName, false);
    }


    @Override
    public TrainTask train(Utils.FileStatus fileStatus, File[] files) {
        return null;
    }

    @Override
    public AnalysisTask processReport(ScanReport scanReport) {
        AnalysisTask analysisTask = new HashAnalysisTask("Hash Scan Analysis", scanReport);
        return analysisTask;
    }

    private class HashAnalysisTask extends AnalysisTask {

        protected HashAnalysisTask(String taskName, ScanReport report) {
            super(taskName, report);
        }

        @Override
        public void processFile(FileFeatures fileFeatures) throws SQLException {
            Utils.HashType hashType = Utils.HashType.valueOf((String) fileFeatures.featureMap.get("HashType"));
            String hash = (String) fileFeatures.featureMap.get(fileFeatures.featureMap.get("HashType"));
            if(db.containsSample(fileFeatures.fileSize, hashType, hash)){
                resultsReport.addMalware(new MalwareEntry(fileFeatures.filePath, 100, "Matched existing hash"));
            }
        }
    }
}
