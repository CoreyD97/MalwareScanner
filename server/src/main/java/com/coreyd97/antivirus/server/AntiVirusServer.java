package com.coreyd97.antivirus.server;

import com.coreyd97.antivirus.common.Options;
import com.coreyd97.antivirus.common.engine.CryptoManager;
import com.coreyd97.antivirus.common.network.ServerConnectionHandler;
import com.coreyd97.antivirus.common.stats.StatProvider;
import com.coreyd97.antivirus.common.stats.StatProviderManager;
import com.coreyd97.antivirus.common.taskscheduler.TaskScheduler;
import com.coreyd97.antivirus.server.clients.ClientManager;
import com.coreyd97.antivirus.server.engine.AnalysisManager;
import com.coreyd97.antivirus.server.engine.AnalysisModule;
import com.coreyd97.antivirus.server.network.AVClientHandler;
import com.coreyd97.antivirus.server.taskscheduler.FirewallWhitelistTask;
import com.coreyd97.antivirus.server.ui.AntiVirusUI;

import javax.swing.*;
import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.sql.SQLException;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;

public class AntiVirusServer {
    private Options options;
    private DatabaseEngine databaseEngine;

    private final AVClientHandler serverNetworkController;
    private final CryptoManager cryptoManager;
    private final ClientManager clientManager;
    private final TaskScheduler taskScheduler;
    private final AnalysisManager analysisManager;
    private final StatProviderManager statProviderManager;
    private final ServerConnectionHandler firewallConnection;

    public AntiVirusServer() {
        Logger.getAnonymousLogger().setLevel(Level.OFF);
        this.options = new Options(new File("config/serverconfig.json"));
        this.statProviderManager = new StatProviderManager();

        CryptoManager tempCryptoManager = null;
        try {
            tempCryptoManager = new CryptoManager(new File("config/serverkey.private"));
        } catch (NoSuchAlgorithmException | IOException | InvalidKeySpecException | InvalidKeyException e) {
            System.err.println("Could not load server keys..." + e.getMessage());
            System.exit(0);
        }
        this.cryptoManager = tempCryptoManager;

        //Print our public key so we can give it to clients
        String encoded = Base64.getEncoder().encodeToString(this.cryptoManager.getPublicKey().getEncoded());
        System.out.println("Server public key: " + encoded);

        try {
            this.databaseEngine = new DatabaseEngine();
            this.statProviderManager.addStatProvider(this.databaseEngine);
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            System.err.println("Could not find H2 database drivers.");
        }

        //Firewall Connection
        String firewallAddress = this.options.getValue("firewall.address", String.class, "192.168.1.1");
        InetAddress firewallINetAddr = null;
        try {
            firewallINetAddr = InetAddress.getByName(firewallAddress);
        } catch (UnknownHostException e) {}
        short firewallPort = this.options.getValue("firewall.port", Integer.class, 4397).shortValue();

        String firewallPublicKey = this.options.getValue("firewall.publickey", String.class, "");

        ServerConnectionHandler tempFirewallConnection = null;
        try{
            tempFirewallConnection = new ServerConnectionHandler(firewallINetAddr, firewallPort, firewallPublicKey, cryptoManager);
        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            System.err.println("Could not load firewall connection handler! Is the public key correct?");
        }

        this.firewallConnection = tempFirewallConnection;

        //TaskScheduler
        this.taskScheduler = new TaskScheduler(25);
        this.statProviderManager.addStatProvider(this.taskScheduler);
        //ClientManager
        this.clientManager = new ClientManager(firewallConnection, taskScheduler);
        this.statProviderManager.addStatProvider(this.clientManager);

        //AnalysisManager
        this.analysisManager = new AnalysisManager(this.taskScheduler, this.clientManager, this.databaseEngine);
        for (AnalysisModule analysisModule : this.analysisManager.getAnalysisModules()) {
            if(analysisModule instanceof StatProvider){
                this.statProviderManager.addStatProvider((StatProvider) analysisModule);
            }
        }

        //ServerThread
        short listenPort = this.options.getValue("server.port", Short.class, (short) 4396);
        AVClientHandler tempClientHandler;
        try {
            tempClientHandler = new AVClientHandler(analysisManager, clientManager, cryptoManager, listenPort);
        } catch (IOException e) {
            tempClientHandler = null;
            System.err.println("Could not bind server to port " + listenPort);
            System.exit(0);
        }
        this.serverNetworkController = tempClientHandler;
        serverNetworkController.start();
    }

    public static void main(String[] args) {
        AntiVirusServer antiVirusServer = new AntiVirusServer();

        SwingUtilities.invokeLater(() -> new AntiVirusUI(antiVirusServer));


        FirewallWhitelistTask whitelistTask = new FirewallWhitelistTask(antiVirusServer.getFirewallConnection());
        whitelistTask.setCallback(() -> {
            if(!whitelistTask.getResult()){
                Logger.getAnonymousLogger().warning("Could not whitelist AV server from firewall!" +
                        "\nBanned clients will not be able to connect to the server!");
            }
        });
        antiVirusServer.getTaskScheduler().execute(whitelistTask);

    }

    public Options getOptions() {
        return options;
    }

    public void shutdown(){
        databaseEngine.shutdown();
        System.exit(0);
    }

//    public static AntiVirusServer getInstance() {
//        if (instance == null) instance = new AntiVirusServer();
//        return instance;
//    }

    public DatabaseEngine getDatabaseEngine() {
        return databaseEngine;
    }

    public TaskScheduler getTaskScheduler() {
        return taskScheduler;
    }

    public AnalysisManager getAnalysisManager() {
        return analysisManager;
    }

    public StatProviderManager getStatProviderManager() {
        return statProviderManager;
    }

    public ServerConnectionHandler getFirewallConnection() {
        return firewallConnection;
    }

    public ClientManager getClientManager() {
        return clientManager;
    }
}
