package com.coreyd97.antivirus.server;

import com.coreyd97.antivirus.common.AntiVirusOptions;
import com.coreyd97.antivirus.common.taskscheduler.TaskScheduler;
import com.coreyd97.antivirus.common.taskscheduler.TrainTask;
import com.coreyd97.antivirus.common.utils.Utils;
import com.coreyd97.antivirus.server.engine.AnalysisManager;
import com.coreyd97.antivirus.server.engine.AnalysisModule;
import com.coreyd97.antivirus.server.engine.RulesAnalysisModule;
import com.coreyd97.antivirus.server.network.ServerNetworkController;
import com.coreyd97.antivirus.server.ui.AntiVirusUI;
import com.coreyd97.antivirus.server.ui.StatProvider;
import org.reflections.Reflections;
import scala.Array;

import javax.swing.*;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class AntiVirusServer {
    private static AntiVirusServer instance;

    private AntiVirusUI ui;
    private AntiVirusOptions options;
    private DatabaseEngine databaseEngine;
    private final TaskScheduler taskScheduler;
    private final AnalysisManager analysisManager;
    private ServerNetworkController serverNetworkController;
    private final ArrayList<StatProvider> statProviders;

    public static void main(String[] args) {
        getInstance();

        SwingUtilities.invokeLater(() -> {
            instance.ui = new AntiVirusUI();
            //Create engines after ui to allow components to bind to ui elements.
            instance.taskScheduler.registerSchedulerListener(instance.ui.getTaskPanel());
        });

    }

    public AntiVirusServer() {
        this.options = new AntiVirusOptions();
        this.statProviders = new ArrayList<>();

        try {
            this.databaseEngine = new DatabaseEngine();
            this.statProviders.add(this.databaseEngine);
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            System.err.println("Could not find H2 database drivers.");
        }

        //TaskScheduler
        this.taskScheduler = new TaskScheduler();
        //NetworkController
        short listenPort = this.options.getValue("server.port", Short.class, (short) 4396);
        try {
            this.serverNetworkController = new ServerNetworkController(listenPort);
            serverNetworkController.start();
        } catch (IOException e) {
            this.serverNetworkController = null;
            System.err.println("Could not bind server to port " + listenPort);
            e.printStackTrace();
            System.exit(0);
        }
        //AnalysisManager
        this.analysisManager = new AnalysisManager(this.serverNetworkController, this.taskScheduler);
        for (AnalysisModule analysisModule : this.analysisManager.getAnalysisModules()) {
            if(analysisModule instanceof StatProvider){
                statProviders.add((StatProvider) analysisModule);
            }
        }

    }

    public AntiVirusOptions getOptions() {
        return options;
    }

    public void shutdown(){
        databaseEngine.shutdown();
        System.exit(0);
    }

    public static AntiVirusServer getInstance() {
        if (instance == null) instance = new AntiVirusServer();
        return instance;
    }

    public DatabaseEngine getDatabaseEngine() {
        return databaseEngine;
    }

    public AntiVirusUI getUI() {
        return ui;
    }

    public TaskScheduler getTaskScheduler() {
        return taskScheduler;
    }

    public AnalysisManager getAnalysisManager() {
        return analysisManager;
    }

    public ArrayList<StatProvider> getStatProviders() {
        return statProviders;
    }
}
