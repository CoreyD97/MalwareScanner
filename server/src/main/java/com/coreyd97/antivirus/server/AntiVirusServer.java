package com.coreyd97.antivirus.server;

import com.coreyd97.antivirus.common.Options;
import com.coreyd97.antivirus.common.stats.StatProvider;
import com.coreyd97.antivirus.common.stats.StatProviderManager;
import com.coreyd97.antivirus.common.taskscheduler.TaskScheduler;
import com.coreyd97.antivirus.server.engine.AnalysisManager;
import com.coreyd97.antivirus.server.engine.AnalysisModule;
import com.coreyd97.antivirus.server.network.ClientHandler;
import com.coreyd97.antivirus.server.ui.AntiVirusUI;

import javax.swing.*;
import java.io.IOException;
import java.sql.SQLException;

public class AntiVirusServer {
    private Options options;
    private DatabaseEngine databaseEngine;

    private final ClientHandler serverNetworkController;
    private final TaskScheduler taskScheduler;
    private final AnalysisManager analysisManager;
    private final StatProviderManager statProviderManager;

    public AntiVirusServer() {
        this.options = new Options();
        this.statProviderManager = new StatProviderManager();

        try {
            this.databaseEngine = new DatabaseEngine();
            this.statProviderManager.addStatProvider(this.databaseEngine);
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            System.err.println("Could not find H2 database drivers.");
        }


        //ServerThread
        short listenPort = this.options.getValue("server.port", Short.class, (short) 4396);
        ClientHandler tempClientHandler;
        try {
            tempClientHandler = new ClientHandler(this, listenPort);
        } catch (IOException e) {
            tempClientHandler = null;
            System.err.println("Could not bind server to port " + listenPort);
            System.exit(0);
        }
        this.serverNetworkController = tempClientHandler;
        serverNetworkController.start();


        //TaskScheduler
        this.taskScheduler = new TaskScheduler();
        this.statProviderManager.addStatProvider(this.taskScheduler);
        //AnalysisManager
        this.analysisManager = new AnalysisManager(this.taskScheduler, this.databaseEngine);
        for (AnalysisModule analysisModule : this.analysisManager.getAnalysisModules()) {
            if(analysisModule instanceof StatProvider){
                this.statProviderManager.addStatProvider((StatProvider) analysisModule);
            }
        }
    }

    public static void main(String[] args) {
        AntiVirusServer antiVirusServer = new AntiVirusServer();

        SwingUtilities.invokeLater(() -> {
            new AntiVirusUI(antiVirusServer);
        });

    }

    public Options getOptions() {
        return options;
    }

    public void shutdown(){
        databaseEngine.shutdown();
        System.exit(0);
    }

//    public static AntiVirusServer getInstance() {
//        if (instance == null) instance = new AntiVirusServer();
//        return instance;
//    }

    public DatabaseEngine getDatabaseEngine() {
        return databaseEngine;
    }

    public TaskScheduler getTaskScheduler() {
        return taskScheduler;
    }

    public AnalysisManager getAnalysisManager() {
        return analysisManager;
    }

    public StatProviderManager getStatProviderManager() {
        return statProviderManager;
    }
}
