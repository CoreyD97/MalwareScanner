package com.coreyd97.antivirus.server;

import com.coreyd97.antivirus.common.AntiVirusOptions;
import com.coreyd97.antivirus.server.engine.ServerScannerEngine;
import com.coreyd97.antivirus.server.network.ServerNetworkController;
import com.coreyd97.antivirus.server.taskscheduler.TaskScheduler;
import com.coreyd97.antivirus.server.ui.AntiVirusUI;
import org.reflections.Reflections;

import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class AntiVirusServer {
    private static AntiVirusServer instance;

    private AntiVirusUI ui;
    private AntiVirusOptions options;
    private DatabaseEngine databaseEngine;
    private Map<String, Class<? extends ServerScannerEngine>> serverScannerEngines;
    private TaskScheduler taskScheduler;
    private ServerNetworkController serverNetworkController;

    public static void main(String[] args) {
        getInstance();

//        SwingUtilities.invokeLater(() -> {
//            instance.ui = new AntiVirusUI();
//            //Create engines after ui to allow components to bind to ui elements.
//            instance.taskScheduler.registerSchedulerListener(instance.ui.getTaskPanel());
//        });

    }

    private AntiVirusServer() {
        this.options = new AntiVirusOptions();
        this.serverScannerEngines = new HashMap<>();

        loadScannerEngines();

        try {
            this.databaseEngine = new DatabaseEngine();
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            System.err.println("Could not find H2 database drivers.");
        }
        this.taskScheduler = new TaskScheduler();

        short listenPort = this.options.getValue("server.port", Short.class, (short) 4396);
        try {
            this.serverNetworkController = new ServerNetworkController(listenPort);
            serverNetworkController.start();
        } catch (IOException e) {
            System.err.println("Could not bind server to port " + listenPort);
            e.printStackTrace();
            System.exit(0);
        }
    }

    private void loadScannerEngines() {
        Reflections reflections = new Reflections("com.coreyd97.antivirus.server.engine");
        Set<Class<? extends ServerScannerEngine>> scannerEngines = reflections.getSubTypesOf(ServerScannerEngine.class);
        for (Class<? extends ServerScannerEngine> scannerEngine : scannerEngines) {
            if(Modifier.isAbstract(scannerEngine.getModifiers())) continue;
            String name; //Try to get engine name defined in class. Otherwise use file name.
            try {
                Field f = scannerEngine.getField("engineName");
                name = (String) f.get(null);
            } catch (NoSuchFieldException | IllegalAccessException e) {
                name = scannerEngine.getName();
            }
            this.serverScannerEngines.put(name, scannerEngine);
        }
    }

    public AntiVirusOptions getOptions() {
        return options;
    }

    public void shutdown(){
        databaseEngine.shutdown();
        System.exit(0);
    }

    public static AntiVirusServer getInstance() {
        if (instance == null) instance = new AntiVirusServer();
        return instance;
    }

    public DatabaseEngine getDatabaseEngine() {
        return databaseEngine;
    }

    public AntiVirusUI getUI() {
        return ui;
    }

    public TaskScheduler getTaskScheduler() {
        return taskScheduler;
    }

    public Map<String, Class<? extends ServerScannerEngine>> getServerScannerEngines() {
        return serverScannerEngines;
    }
}
