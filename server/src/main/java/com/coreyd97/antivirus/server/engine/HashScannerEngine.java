package com.coreyd97.antivirus.server.engine;

import com.coreyd97.antivirus.common.report.MalwareEntry;
import com.coreyd97.antivirus.common.report.ResultsReport;
import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.taskscheduler.AnalysisTask;
import com.coreyd97.antivirus.common.taskscheduler.FileTask;
import com.coreyd97.antivirus.common.utils.Utils;
import com.coreyd97.antivirus.server.AntiVirusServer;

import java.io.File;
import java.sql.SQLException;

public class HashScannerEngine extends ServerScannerEngine {
    public static final String engineName = "Hash Scanner";

    public HashScannerEngine() {
        super(engineName, false);
    }


    @Override
    public FileTask train(File[] files) {
        return null;
    }

    @Override
    public AnalysisTask processReports(ScanReport[] scanReports) {
        AnalysisTask analysisTask = new HashAnalysisTask("Hash Scan Analysis", scanReports, new ResultsReport());
        AntiVirusServer.getInstance().getTaskScheduler().registerTask(analysisTask);
        return analysisTask;
    }

    private class HashAnalysisTask extends AnalysisTask {

        protected HashAnalysisTask(String taskName, ScanReport[] reports, ResultsReport resultsReport) {
            super(taskName, reports, resultsReport);
        }

        @Override
        public void processReport(ScanReport scanReport) {
            scanReport.getFileFeatures().forEach(fileFeatures -> {
                try {
                    Utils.HashType hashType = Utils.HashType.valueOf((String) fileFeatures.featureMap.get("HashType"));
                    String hash = (String) fileFeatures.featureMap.get(fileFeatures.featureMap.get("HashType"));
                    if(db.containsSample(fileFeatures.fileSize, hashType, hash)){
                        report.addMalware(new MalwareEntry(fileFeatures.filePath, 100, "Matched existing hash"));
                    }
                } catch (SQLException e) {e.printStackTrace();}
            });
        }
    }
}
