package com.coreyd97.antivirus.server.test;

import com.coreyd97.c45.C45;
import com.coreyd97.c45.DataElement;
import com.coreyd97.c45.Feature;
import com.coreyd97.c45.FeatureEntropy;

import java.util.*;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class TimeBestFeature {

    public static void main(String[] args) {
        int featureCount = 140;
//        int featureCount = 143000;
        int elemCount = 600;
//        int elemCount = 60000;
        List<Feature> features = new ArrayList<>();
        for (int i = 0; i < featureCount; i++) {
            features.add(new Feature(String.valueOf(i)));
        }
        List<DataElement> elements = new ArrayList<>();
        for (int i = 0; i < elemCount; i++) {
            Set<String> elemFeatures = new HashSet<>();
            for (int j = 0; j < featureCount; j++) {
                if(Math.round(Math.random()*14) == 1){
                    elemFeatures.add(String.valueOf(j));
                }
            }
            DataElement e = new DataElement(String.valueOf(Math.round(Math.random()) == 1), null, elemFeatures);
            elements.add(e);
        }


        System.out.println("START");
        Double totalEntropy = C45.calculateEntropy(elements, String.valueOf(true));
        long t = new Date().getTime();
        OptionalDouble max = features.stream().mapToDouble(feature -> {
            FeatureEntropy f = new FeatureEntropy(feature, elements, totalEntropy, String.valueOf(true));
            FeatureEntropy.calculateEntropy(f);
            return f.entropyGain;
        }).max();
        System.out.println(max + " " + (new Date().getTime()-t));

//        t = new Date().getTime();
//        FeatureEntropy f = C45.bestFeature(elements, features, String.valueOf(true));
//        FeatureEntropy.calculateEntropy(f);
//        System.out.println(f.entropyGain + " " + (new Date().getTime()-t));

        ExecutorService e = Executors.newFixedThreadPool(100);
        t = new Date().getTime();
        FeatureEntropy fb = C45.bestFeature(e, elements, features, String.valueOf(true));
        System.out.println(fb.entropyGain + " " + (new Date().getTime()-t));
    }
}
