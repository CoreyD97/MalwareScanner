package com.coreyd97.antivirus.server.test;

import com.coreyd97.antivirus.common.report.FileFeatures;
import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.taskscheduler.AnalysisTask;
import com.coreyd97.antivirus.server.AntiVirusServer;
import com.coreyd97.antivirus.server.engine.RulesAnalysisModule;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;

public class RulesAnalysisTest {

    AntiVirusServer av;

    @Before
    public void beforeTests() throws SQLException, ClassNotFoundException {
        av = new AntiVirusServer();
    }

    @Test
    public void test() throws SQLException, ClassNotFoundException, InterruptedException {
        RulesAnalysisModule module = new RulesAnalysisModule();

        ScanReport report = Mockito.mock(ScanReport.class);
        ArrayList<FileFeatures> features = new ArrayList<>();
        File f = Mockito.mock(File.class);
        Mockito.when(f.getAbsolutePath()).thenReturn("Fake File");
        ArrayList<String> matchingRules = new ArrayList<>();
        matchingRules.add("Str_Win32_Winsock2_Library");

        FileFeatures fileFeatures = new FileFeatures(f);
        fileFeatures.setFeatureList(matchingRules);
        features.add(fileFeatures);
        Mockito.when(report.getFileFeatures()).thenReturn(features);

        AnalysisTask analysisTask = module.processReport(report);
        analysisTask.setReportHandler(resultsReport -> {
            resultsReport.getFoundMalware().forEach(System.err::println);
        });
        analysisTask.run();
    }
}
