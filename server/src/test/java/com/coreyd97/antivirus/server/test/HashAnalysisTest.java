package com.coreyd97.antivirus.server.test;

import com.coreyd97.antivirus.common.report.FileFeatures;
import com.coreyd97.antivirus.common.report.MalwareEntry;
import com.coreyd97.antivirus.common.report.ResultsReport;
import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.taskscheduler.AnalysisTask;
import com.coreyd97.antivirus.common.utils.Utils;
import com.coreyd97.antivirus.server.AntiVirusServer;
import com.coreyd97.antivirus.server.DatabaseEngine;
import com.coreyd97.antivirus.server.engine.AnalysisManager;
import com.coreyd97.antivirus.server.engine.HashAnalysisModule;
import com.coreyd97.antivirus.server.engine.RulesAnalysisModule;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.Mockito;

import javax.xml.crypto.Data;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;

import static java.util.Arrays.asList;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;

public class HashAnalysisTest {

    AnalysisManager analysisManager;
    HashAnalysisModule module;
    ScanReport report;

    @Before
    public void beforeTests() throws SQLException, ClassNotFoundException, IOException {
        analysisManager = Mockito.mock(AnalysisManager.class);
        module = new HashAnalysisModule(analysisManager);

        report = Mockito.mock(ScanReport.class);
        ArrayList<FileFeatures> fakeFeatureList = new ArrayList<>();

        FileFeatures fakeFeatures = new FileFeatures(new File("MALICIOUS"));
        HashMap<FileFeatures.Feature, String> featureMap = new HashMap<>();
        featureMap.put(FileFeatures.Feature.MD5, "MALICIOUSMD5");
        fakeFeatures.setFeatureMap(featureMap);
        fakeFeatureList.add(fakeFeatures);

        fakeFeatures = new FileFeatures(new File("CLEAN"));
        featureMap = new HashMap<>();
        featureMap.put(FileFeatures.Feature.MD5, "CLEANMD5");
        fakeFeatures.setFeatureMap(featureMap);
        fakeFeatureList.add(fakeFeatures);

        when(report.getFileFeatures()).thenReturn(fakeFeatureList);
    }

    @Test
    public void test() throws SQLException, ClassNotFoundException, InterruptedException, IOException {
        //TODO Figure out how to mock static methods
        when(DatabaseEngine.isSampleMalicious(any(), Utils.HashType.MD5, "MALICIOUSMD5"))
                .thenReturn(true);

        when(DatabaseEngine.isSampleMalicious(any(), Utils.HashType.MD5, "CLEANMD5"))
                .thenReturn(false);



        AnalysisTask analysisTask = module.processReport(report);
        analysisTask.run();
        ResultsReport results = analysisTask.getResult();

        ArrayList<String> maliciousPaths = new ArrayList<>(Arrays.asList(new String[]{"MALICIOUS"}));
        ArrayList<String> cleanPaths = new ArrayList<>(Arrays.asList(new String[]{"CLEAN"}));
        for (MalwareEntry malwareEntry : results.getFoundMalware()) {
            Assert.assertTrue(maliciousPaths.contains(malwareEntry.getFilePath()));
            Assert.assertTrue(!cleanPaths.contains(malwareEntry.getFilePath()));
        }
    }
}
