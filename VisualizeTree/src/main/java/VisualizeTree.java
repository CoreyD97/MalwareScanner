import com.coreyd97.antivirus.server.DatabaseEngine;
import com.coreyd97.antivirus.server.engine.ImportStatsAnalysisModule;
import com.coreyd97.c45.TreeNode;
import com.google.gson.Gson;
import guru.nidi.graphviz.attribute.Shape;
import guru.nidi.graphviz.engine.Format;
import guru.nidi.graphviz.engine.Graphviz;
import guru.nidi.graphviz.model.Graph;
import guru.nidi.graphviz.model.Label;
import guru.nidi.graphviz.model.Node;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;

import static guru.nidi.graphviz.model.Factory.graph;
import static guru.nidi.graphviz.model.Factory.node;
import static guru.nidi.graphviz.model.Link.to;

public class VisualizeTree {

    static DatabaseEngine db;
    static Connection conn;

    public static void main(String[] args) {
        if(args.length != 3){
            printUsage();
            System.exit(1);
        }

        File inputTree = new File(args[0]);
        if(!inputTree.exists()) {
            System.err.println("Tree file does not exist");
            System.exit(1);
        }

        TreeNode tree = null;
        try {
            tree = new Gson().fromJson(new FileReader(inputTree), TreeNode.class);
            if(!tree.isTerminal && tree.attribute == null){
                System.err.println("Malformed Tree!");
                System.exit(1);
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        boolean resolveNames = Boolean.parseBoolean(args[1]);
        File outputFile = new File(args[2]);

        try {
            db = new DatabaseEngine(1);
        } catch (SQLException | ClassNotFoundException e) {
            System.err.println("Could not setup database!");
            System.exit(0);
        }
        conn = db.getConnection(VisualizeTree.class);
        visualize(tree, resolveNames, outputFile);
        db.releaseConnection(conn);
    }

    public static void visualize(TreeNode tree, boolean resolveNames, File outputFile){
        tree.simplify();
        Graph g = graph("DecisionTree").directed().with(generateTree(tree, resolveNames));
        try {
            Graphviz.fromGraph(g).width(20000).render(Format.SVG).toFile(outputFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static Node generateTree(TreeNode treeNode, boolean resolveNames){
        if(treeNode.isTerminal){
            return createNode(treeNode, resolveNames);
        }else {
            Node node = createNode(treeNode, resolveNames);
            for (TreeNode child : treeNode.children) {
                node = node.link(to(generateTree(child, resolveNames)).with(Label.of(child.value)));
            }
            return node;
        }
    }

    public static Node createNode(TreeNode treeNode, boolean resolveNames){
        if(treeNode.isTerminal){
            return node(String.valueOf(Math.random())).with(Shape.RECTANGLE, Label.of(treeNode.classification));
        }else{
            String nodeLabel;
            if(resolveNames){
                nodeLabel = ImportStatsAnalysisModule.getFunctionName(conn, Integer.valueOf(treeNode.attribute));
                if(nodeLabel.length() > 100) nodeLabel = nodeLabel.substring(0, 98) + "...";
            }else{
                nodeLabel = treeNode.attribute;
            }
            return node(String.valueOf(Math.random())).with(Label.of(nodeLabel));
        }
    }


    public static void printUsage(){
        System.out.println("Usage: inputTree resolveNames outputFile");
    }
}
