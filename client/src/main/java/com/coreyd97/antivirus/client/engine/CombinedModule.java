package com.coreyd97.antivirus.client.engine;

import com.coreyd97.antivirus.common.engine.ClientDetectionModule;
import com.coreyd97.antivirus.common.engine.YaraManager;
import com.coreyd97.antivirus.common.report.FileFeatures;
import com.coreyd97.antivirus.common.taskscheduler.ScanTask;
import com.coreyd97.antivirus.common.utils.ImportStatsUtils;
import com.coreyd97.antivirus.common.utils.Utils;
import com.github.katjahahn.parser.PEData;
import com.github.katjahahn.parser.PELoader;
import com.github.katjahahn.parser.sections.SectionLoader;
import com.github.katjahahn.parser.sections.idata.ImportSection;
import com.github.plusvic.yara.YaraException;
import com.github.plusvic.yara.YaraScanner;

import java.io.File;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.HashMap;

public class CombinedModule extends ClientDetectionModule {
    public static final String engineName = "Combined Scanner";
    private final YaraManager yaraManager;

    public CombinedModule(ScanManager scanManager) {
        super(CombinedModule.engineName);
        this.yaraManager = scanManager.getYaraManager();
    }

    @Override
    public ScanTask generateScanTask(File[] files) {
        return new CombinedScanTask("Combined Scan Task", files, ScanTask.ScanType.SCAN);
    }

    @Override
    public ScanTask generateExplainTask(File[] files) {
        return new CombinedScanTask("Combined Scan Explain Task", files, ScanTask.ScanType.EXPLAIN);
    }


    private class CombinedScanTask extends ScanTask {
        private Utils.HashType hashType = Utils.HashType.MD5;
        private YaraScanner scanner;

        protected CombinedScanTask(String taskName, File[] files, ScanType scanType) {
            super(taskName, files, CombinedModule.this, scanType);
            this.scanner = yaraManager.getScanner();
        }

        @Override
        protected boolean processFile(File file) {
            HashMap<FileFeatures.Feature, String> featureMap = new HashMap<>();
            featureMap.put(FileFeatures.Feature.HASH_TYPE, hashType.toString());
            try {
                featureMap.put(FileFeatures.Feature.valueOf(hashType.toString()), Utils.fileChecksum(MessageDigest.getInstance(hashType.toString()), file));
            } catch (NoSuchAlgorithmException | IOException e) {}

            FileFeatures fileFeatures = new FileFeatures(file);
            fileFeatures.setFeatureMap(featureMap);

            try {
                PEData data = PELoader.loadPE(file);
                SectionLoader sectionLoader = new SectionLoader(data);
                ImportSection section = sectionLoader.loadImportSection();
                HashMap<String, ArrayList<String>> importedFunctions = ImportStatsUtils.convertToImportMap(section.getImports());
                fileFeatures.setMapOfLists(importedFunctions);

            } catch (IOException | IllegalStateException e) {
                //Could not extract imports. Not a PE file?
            }

            ArrayList<String> matchingYaraRules = new ArrayList<>();
            try {
                scanner.scan(file, null, yaraRule -> matchingYaraRules.add(yaraRule.getIdentifier()));
            }catch (YaraException e){}

            fileFeatures.setFeatureList(matchingYaraRules);

            report.addFileFeatures(fileFeatures);
            return true;
        }
    }

}
