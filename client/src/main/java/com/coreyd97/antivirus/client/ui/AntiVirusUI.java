package com.coreyd97.antivirus.client.ui;

import com.coreyd97.antivirus.client.AntiVirusClient;
import com.coreyd97.antivirus.client.engine.ImportStatsDetectionModule;
import com.coreyd97.antivirus.client.engine.RulesDetectionModule;
import com.coreyd97.antivirus.common.engine.ClientDetectionModule;
import com.coreyd97.antivirus.common.taskscheduler.TaskSchedulerListener;
import com.coreyd97.antivirus.common.ui.TaskManagerPanel;
import com.coreyd97.antivirus.common.utils.Utils;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;

public class AntiVirusUI extends JFrame {
    AntiVirusClient avClient;
    JPanel containerPanel;
    private JButton optionsButton;
    private JButton ruleScanButton;
    private JButton importScanButton;
    private JButton exitButton;
    private JTabbedPane mainTabbedPane;
    private JPanel quarantinePanel;
    private JPanel buttonPanel;
    private JScrollPane taskPanel;
    private JPanel dashPanel;
    private JPanel activeScanPanel;
    private JTabbedPane scanDetailsTabbedPanel;


    public AntiVirusUI(AntiVirusClient avClient) {
        super("Malware Scanner");
        this.avClient = avClient;

        $$$setupUI$$$();
        this.setMinimumSize(new Dimension(800, 600));
        this.setContentPane(this.containerPanel);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        ruleScanButton.addActionListener(actionEvent -> {
            ClientDetectionModule scannerEngine = new RulesDetectionModule();
            File[] files = Utils.fileChooser("Scan Files", JFileChooser.FILES_AND_DIRECTORIES, true, "Scan");
            if (files == null || files.length == 0) return;

            this.avClient.getScanManager().requestScan(scannerEngine, files);
            this.mainTabbedPane.setSelectedIndex(1);
        });

        importScanButton.addActionListener(actionEvent -> {
            ClientDetectionModule scannerEngine = new ImportStatsDetectionModule();
            File[] files = Utils.fileChooser("Scan Files", JFileChooser.FILES_AND_DIRECTORIES, true, "Scan");
            if (files == null || files.length == 0) return;

            this.avClient.getScanManager().requestScan(scannerEngine, files);
            this.mainTabbedPane.setSelectedIndex(1);
        });

        optionsButton.addActionListener(actionEvent -> {
            OptionsForm.getInstance(this.avClient).setVisible(true);
        });

        exitButton.addActionListener(actionEvent -> {
            SwingUtilities.getWindowAncestor((Component) actionEvent.getSource()).dispose();
        });

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent windowEvent) {
                super.windowClosed(windowEvent);
                AntiVirusUI.this.avClient.shutdown();
            }
        });

        this.pack();
        this.setVisible(true);
    }

    private void createUIComponents() {
        taskPanel = new TaskManagerPanel();
        this.avClient.getTaskScheduler().registerSchedulerListener((TaskSchedulerListener) this.taskPanel);

        scanDetailsTabbedPanel = new ScanDetailsTabbedPanel(this.avClient.getScanManager());
        this.avClient.getTaskScheduler().registerSchedulerListener((TaskSchedulerListener) this.scanDetailsTabbedPanel);
    }


    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        containerPanel = new JPanel();
        containerPanel.setLayout(new GridBagLayout());
        containerPanel.setMaximumSize(new Dimension(2147483647, 2147483647));
        containerPanel.setMinimumSize(new Dimension(0, 0));
        containerPanel.setPreferredSize(new Dimension(800, 600));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 100.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(15, 15, 0, 0);
        containerPanel.add(panel1, gbc);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 24, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Malware Scanner");
        panel1.add(label1, BorderLayout.CENTER);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.VERTICAL;
        containerPanel.add(spacer1, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 80.0;
        gbc.weighty = 1000.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(0, 15, 15, 0);
        containerPanel.add(panel2, gbc);
        mainTabbedPane = new JTabbedPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 100.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel2.add(mainTabbedPane, gbc);
        dashPanel = new JPanel();
        dashPanel.setLayout(new GridBagLayout());
        dashPanel.setName("");
        mainTabbedPane.addTab("Dashboard", dashPanel);
        final JSplitPane splitPane1 = new JSplitPane();
        splitPane1.setDividerLocation(231);
        splitPane1.setDividerSize(10);
        splitPane1.setEnabled(true);
        splitPane1.setLastDividerLocation(99);
        splitPane1.setOneTouchExpandable(true);
        splitPane1.setOrientation(0);
        splitPane1.setResizeWeight(0.85);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        dashPanel.add(splitPane1, gbc);
        splitPane1.setRightComponent(taskPanel);
        taskPanel.setBorder(BorderFactory.createTitledBorder("Active Tasks"));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        splitPane1.setLeftComponent(panel3);
        activeScanPanel = new JPanel();
        activeScanPanel.setLayout(new GridBagLayout());
        mainTabbedPane.addTab("Active Scan", activeScanPanel);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        activeScanPanel.add(scanDetailsTabbedPanel, gbc);
        quarantinePanel = new JPanel();
        quarantinePanel.setLayout(new GridBagLayout());
        mainTabbedPane.addTab("Quarantine", quarantinePanel);
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 2;
        gbc.weightx = 15.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(15, 0, 15, 15);
        containerPanel.add(buttonPanel, gbc);
        optionsButton = new JButton();
        optionsButton.setText("Options");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 4.0;
        gbc.anchor = GridBagConstraints.NORTH;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 10;
        gbc.ipady = 10;
        gbc.insets = new Insets(0, 0, 5, 0);
        buttonPanel.add(optionsButton, gbc);
        ruleScanButton = new JButton();
        ruleScanButton.setText("Rule Scan");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weighty = 4.0;
        gbc.anchor = GridBagConstraints.NORTH;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 10;
        gbc.ipady = 10;
        gbc.insets = new Insets(0, 0, 5, 0);
        buttonPanel.add(ruleScanButton, gbc);
        importScanButton = new JButton();
        importScanButton.setText("Import Scan");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weighty = 4.0;
        gbc.anchor = GridBagConstraints.NORTH;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 10;
        gbc.ipady = 10;
        gbc.insets = new Insets(0, 0, 5, 0);
        buttonPanel.add(importScanButton, gbc);
        exitButton = new JButton();
        exitButton.setText("Exit");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weighty = 50.0;
        gbc.anchor = GridBagConstraints.SOUTH;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 10;
        gbc.ipady = 10;
        buttonPanel.add(exitButton, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        containerPanel.add(spacer2, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return containerPanel;
    }
}
