package com.coreyd97.antivirus.client.ui;

import com.coreyd97.antivirus.client.AntiVirusClient;
import com.coreyd97.antivirus.client.engine.ScanManager;
import com.coreyd97.antivirus.common.taskscheduler.ScanTask;
import com.coreyd97.antivirus.common.ui.TaskDetailPanel;
import com.coreyd97.antivirus.common.utils.Utils;

import javax.swing.*;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;

public class ActiveScanPanel extends JSplitPane {

    private final ScanTask task;
    private final ScanManager scanManager;

    private final TaskDetailPanel taskDetailPanel;
    private final ScanTreeTableModel scanTreeTableModel;
    private final FileSystemTree scanTree;

    private JPopupMenu popupMenu;
    private JMenuItem explainItem;

    public ActiveScanPanel(ScanManager scanManager, ScanTask task) {
        this.task = task;
        this.scanManager = scanManager;
        this.taskDetailPanel = new TaskDetailPanel(task);
        this.scanTreeTableModel = new ScanTreeTableModel(task);
        this.scanTree = new FileSystemTree(this.scanTreeTableModel);
        this.scanTree.setAutoCreateRowSorter(true);
        this.setOrientation(JSplitPane.VERTICAL_SPLIT);
        this.setBottomComponent(this.taskDetailPanel);
        this.setTopComponent(new JScrollPane(this.scanTree));
        this.setDividerLocation(0.8);

        popupMenu = new JPopupMenu();
        explainItem = new JMenuItem("Explain Result");
        explainItem.addActionListener(actionEvent -> {
            int row = this.scanTree.getSelectedRow();
            Object node = this.scanTree.getPathForRow(row).getLastPathComponent();

            Utils.showMessage("File Explanation", "Explanation of classification requested for file " + ((File) node).getPath());

            ScanTask explainTask = scanManager.requestExplanation(task.getDetectionModule(), new File[]{(File) node});
            explainTask.setCallback(() -> {
                explainTask.getResult().display();
            });
        });
        popupMenu.add(explainItem);

        popupMenu.addPopupMenuListener(new PopupMenuListener() {

            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        int rowAtPoint = scanTree.rowAtPoint(SwingUtilities.convertPoint(popupMenu, new Point(0, 0), scanTree));
                        if (rowAtPoint > -1) {
                            scanTree.setRowSelectionInterval(rowAtPoint, rowAtPoint);
                        }
                        int row = scanTree.getSelectedRow();
                        Object node = scanTree.getPathForRow(row).getLastPathComponent();
                        explainItem.setEnabled(node instanceof File && ((File) node).isFile());
                    }
                });
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {}
            @Override
            public void popupMenuCanceled(PopupMenuEvent e) {}
        });

        scanTree.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent mouseEvent) {
                if(mouseEvent.getButton() == MouseEvent.BUTTON3)
                    showPopup(mouseEvent);
            }

            @Override
            public void mouseReleased(MouseEvent mouseEvent) {
                if(mouseEvent.getButton() == MouseEvent.BUTTON3)
                    showPopup(mouseEvent);
            }

            private void showPopup(MouseEvent e){
                if(e.isPopupTrigger()){
                    popupMenu.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });
    }

    public void dispose() {
        this.taskDetailPanel.dispose();
        this.scanTreeTableModel.dispose();
        this.scanTree.dispose();
    }
}
