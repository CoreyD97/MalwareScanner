package com.coreyd97.antivirus.client.engine;

import com.coreyd97.antivirus.client.AntiVirus;
import com.coreyd97.antivirus.common.engine.ClientScannerEngine;
import com.coreyd97.antivirus.common.utils.ScannerEngineUtils;
import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.report.TrainReport;
import com.coreyd97.antivirus.common.taskscheduler.FileTask;
import com.github.plusvic.yara.*;
import com.github.plusvic.yara.embedded.YaraLibrary;

import java.io.File;

public class RulesEngine extends ClientScannerEngine {
    public static final String engineName = "Yara Rule Engine";
    private YaraLibrary library;
    private YaraCompiler compiler;
    private Yara yara;

    public RulesEngine() {
        super(engineName);
        this.yara = YaraFactory.create(YaraFactory.Mode.EMBEDDED);
        this.compiler = yara.createCompiler();

        new Thread(){
            @Override
            public void run() {
                try {
                    TrainReport report = importRules(new File[]{new File("config/rules/index.yar")}).call();
//                    reports.display();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }.start();
    }

    @Override
    public FileTask generateScanTask(File[] files) {
        return new RuleScanTask(files, new ScanReport(this));
    }

    private class RuleScanTask extends FileTask {
        YaraScanner scanner;
        File activeFile;

        RuleScanTask(File[] files, ScanReport scanReport) {
            super("Yara Rule Scan", files, scanReport);
        }

        @Override
        protected void processFile(File file) {
            try {
                activeFile = file;
                scanner.scan(file);
            }catch (YaraException e){}
        }

        @Override
        public ScanReport call() throws Exception {
            scanner = compiler.createScanner();
            scanner.setCallback(new YaraScanCallback() {
                @Override
                public void onMatch(YaraRule yaraRule) {
                    report.addString(activeFile.getName() + " - " + yaraRule.getIdentifier());
                }
            });
            return (ScanReport) super.call();
        }
    }

    private ScannerEngineUtils.RuleImportTask importRules(File[] files){
        ScannerEngineUtils.RuleImportTask task = new ScannerEngineUtils.RuleImportTask(files, new TrainReport(this), yara, compiler);
        AntiVirus.getInstance().getTaskScheduler().submitFutureTask(task);
        return task;
    }

    @Override
    public String toString() {
        return getEngineName();
    }
}
