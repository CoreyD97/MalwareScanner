package com.coreyd97.antivirus.client.ui;

import com.coreyd97.antivirus.client.AntiVirus;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.text.MaskFormatter;
import java.awt.*;
import java.awt.event.ComponentAdapter;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.net.Inet4Address;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.util.concurrent.ExecutionException;

public class OptionsForm extends JFrame {
    private JPanel contentPane;
    private JButton btnClose;
    private JTextField txtServerIP;
    private JSpinner spnPort;
    private JButton btnTestConnection;
    private JLabel lblTestConnection;
    private static OptionsForm instance;

    private OptionsForm() {
        $$$setupUI$$$();
        this.setContentPane(contentPane);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setMinimumSize(new Dimension(600, 300));

        String address = AntiVirus.getInstance().getOptions().getValue("server.address", String.class);
        txtServerIP.setText(address);

        pack();
        btnClose.addActionListener(actionEvent -> OptionsForm.this.dispose());
        btnTestConnection.addActionListener(actionEvent -> {
            new Thread(() -> {
                try {
                    if (AntiVirus.getInstance().getNetworkController().checkConnection()) {
                        lblTestConnection.setText("Connection Successful");
                        lblTestConnection.setForeground(new Color(43, 156, 59));
                    } else {
                        lblTestConnection.setText("Connection Failed");
                        lblTestConnection.setForeground(new Color(131, 14, 15));
                    }
                } catch (ExecutionException | InterruptedException e) {
                    lblTestConnection.setText("Connection Failed");
                    lblTestConnection.setForeground(new Color(131, 14, 15));
                }
            }).start();
        });
        txtServerIP.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent focusEvent) {
                super.focusLost(focusEvent);
                try {
                    Inet4Address address = (Inet4Address) Inet4Address.getByName(txtServerIP.getText());
                    AntiVirus.getInstance().getNetworkController().setServerAddress(address);
                    txtServerIP.setForeground(new Color(43, 156, 59));
                    AntiVirus.getInstance().getOptions().setValue("server.address", address);
                } catch (UnknownHostException e) {
                    txtServerIP.setForeground(new Color(131, 14, 15));
                }
            }
        });
        spnPort.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent changeEvent) {
                short port = ((Integer) spnPort.getValue()).shortValue();
                AntiVirus.getInstance().getNetworkController().setPort(port);
                AntiVirus.getInstance().getOptions().setValue("server.port", port);
                AntiVirus.getInstance().getNetworkController().setPort(port);
            }
        });
    }


    public static OptionsForm getInstance() {
        if (instance == null) {
            instance = new OptionsForm();
        } else {
            instance.setVisible(true);
            instance.toFront();
        }
        return instance;
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    private void createUIComponents() {
        short port = AntiVirus.getInstance().getOptions().getValue("server.port", Integer.class, 4397).shortValue();
        spnPort = new JSpinner(new SpinnerNumberModel(port, 1, 65535, 1));
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(15, 15, 0, 15);
        contentPane.add(panel1, gbc);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 22, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Malware Scanner Options");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        panel1.add(label1, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(15, 15, 15, 15);
        contentPane.add(panel2, gbc);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel2.add(panel3, gbc);
        panel3.setBorder(BorderFactory.createTitledBorder("Server Settings"));
        final JLabel label2 = new JLabel();
        label2.setText("IP Address");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(10, 10, 0, 0);
        panel3.add(label2, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(spacer1, gbc);
        final JLabel label3 = new JLabel();
        label3.setText("Port");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(10, 10, 10, 0);
        panel3.add(label3, gbc);
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 0, 0, 10);
        panel3.add(spnPort, gbc);
        btnTestConnection = new JButton();
        btnTestConnection.setText("Test Connection");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 10, 10, 0);
        panel3.add(btnTestConnection, gbc);
        lblTestConnection = new JLabel();
        lblTestConnection.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(0, 0, 10, 10);
        panel3.add(lblTestConnection, gbc);
        txtServerIP = new JTextField();
        txtServerIP.setHorizontalAlignment(4);
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(0, 0, 0, 10);
        panel3.add(txtServerIP, gbc);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weighty = 0.6;
        gbc.fill = GridBagConstraints.BOTH;
        panel2.add(panel4, gbc);
        panel4.setBorder(BorderFactory.createTitledBorder("Other Stuff"));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.VERTICAL;
        gbc.insets = new Insets(0, 0, 7, 15);
        contentPane.add(panel5, gbc);
        btnClose = new JButton();
        btnClose.setText("Close");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel5.add(btnClose, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel5.add(spacer2, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
