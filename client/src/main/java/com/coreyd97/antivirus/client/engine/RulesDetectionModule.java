package com.coreyd97.antivirus.client.engine;

import com.coreyd97.antivirus.common.engine.ClientDetectionModule;
import com.coreyd97.antivirus.common.report.FileFeatures;
import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.report.TrainReport;
import com.coreyd97.antivirus.common.taskscheduler.ScanTask;
import com.coreyd97.antivirus.common.utils.ScannerEngineUtils;
import com.github.plusvic.yara.*;
import com.github.plusvic.yara.embedded.YaraLibrary;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;

public class RulesDetectionModule extends ClientDetectionModule {
    public static final String engineName = "Yara Rule Engine";
    private YaraCompiler compiler;
    private Yara yara;

    public RulesDetectionModule() {
        super(engineName);

        this.yara = YaraFactory.create(YaraFactory.Mode.EMBEDDED);
        this.compiler = yara.createCompiler();

        ScannerEngineUtils.RuleImportTask importTask = new ScannerEngineUtils.RuleImportTask(new File[]{new File("config/rules/index.yar")}, RulesDetectionModule.this, yara, compiler);
        importTask.run();
    }

    @Override
    public ScanTask generateScanTask(File[] files) {
        return new RuleScanTask("Yara Rule Scan", files, ScanTask.ScanType.SCAN);
    }

    @Override
    public ScanTask generateExplainTask(File[] files) {
        return new RuleScanTask("Yara Rule Explanation", files, ScanTask.ScanType.EXPLAIN);
    }

    private class RuleScanTask extends ScanTask {
        YaraScanner scanner;
        File activeFile;

        RuleScanTask(String taskName, File[] files, ScanType scanType) {
            super(taskName, files, RulesDetectionModule.this, scanType);
        }

        @Override
        protected boolean processFile(File file) {
            HashMap<FileFeatures.Feature, String> featureMap = new HashMap<>();
            ArrayList<String> ruleMatches = new ArrayList<>();
            try {
                activeFile = file;
                scanner.scan(file, null, yaraRule -> ruleMatches.add(yaraRule.getIdentifier()));
            }catch (YaraException e){}

            try {
                //ADD MIME TYPE AS FEATURE
                featureMap.put(FileFeatures.Feature.MIME_TYPE, Files.probeContentType(file.toPath()));
            } catch (IOException e) {
                featureMap.put(FileFeatures.Feature.MIME_TYPE, "UNKNOWN");
            }

            //Add file features with feature list as type string and add a feature map.
            FileFeatures fileFeatures = report.addFile(file);
            fileFeatures.setFeatureList(ruleMatches);
            fileFeatures.setFeatureMap(featureMap);
            return true;
        }

        @Override
        public void run() {
            scanner = compiler.createScanner();
            super.run();
            yara.finalizeThread();
        }
    }


    @Override
    public String toString() {
        return getModuleName();
    }
}
