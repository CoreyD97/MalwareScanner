package com.coreyd97.antivirus.client.engine;

import com.coreyd97.antivirus.client.AntiVirusClient;
import com.coreyd97.antivirus.common.engine.ClientDetectionModule;
import com.coreyd97.antivirus.common.report.Report;
import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.report.TrainReport;
import com.coreyd97.antivirus.common.taskscheduler.FileTask;
import com.coreyd97.antivirus.common.utils.ScannerEngineUtils;
import com.github.plusvic.yara.*;
import com.github.plusvic.yara.embedded.YaraLibrary;

import java.io.File;
import java.util.ArrayList;

public class RulesDetectionModule extends ClientDetectionModule {
    public static final String engineName = "Yara Rule Engine";
    private YaraLibrary library;
    private YaraCompiler compiler;
    private Yara yara;

    public RulesDetectionModule() {
        super(engineName);
        this.yara = YaraFactory.create(YaraFactory.Mode.EMBEDDED);
        this.compiler = yara.createCompiler();

        ScannerEngineUtils.RuleImportTask importTask = generateRuleImportTask(new File[]{new File("config/rules/index.yar")});
        importTask.call();
    }

    @Override
    public FileTask generateScanTask(File[] files) {
        return new RuleScanTask(files, new ScanReport(engineName));
    }

    private class RuleScanTask extends FileTask {
        YaraScanner scanner;
        File activeFile;
        ArrayList<String> activeFileMatches;

        RuleScanTask(File[] files, ScanReport scanReport) {
            super("Yara Rule Scan", files, scanReport);
        }

        @Override
        protected void processFile(File file) {
            activeFileMatches = new ArrayList<>();
            try {
                activeFile = file;
                scanner.scan(file);
            }catch (YaraException e){}
            ((ScanReport) report).addFile(activeFile, activeFileMatches);
        }

        @Override
        public Report call() {
            scanner = compiler.createScanner();
            scanner.setCallback(new YaraScanCallback() {
                @Override
                public void onMatch(YaraRule yaraRule) {
                    activeFileMatches.add(yaraRule.getIdentifier());
                }
            });
            return super.call();
        }
    }


    private ScannerEngineUtils.RuleImportTask generateRuleImportTask(File[] files){
        ScannerEngineUtils.RuleImportTask importTask = new ScannerEngineUtils.RuleImportTask(files, new TrainReport(this), yara, compiler);
        return importTask;
    }

    @Override
    public String toString() {
        return getEngineName();
    }
}
