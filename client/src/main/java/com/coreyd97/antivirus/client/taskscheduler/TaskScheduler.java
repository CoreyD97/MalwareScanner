package com.coreyd97.antivirus.client.taskscheduler;

import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.taskscheduler.Task;
import com.coreyd97.antivirus.common.taskscheduler.TaskListener;

import java.util.ArrayList;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;

public class TaskScheduler implements TaskListener {
    ArrayList<Task> tasks;
    ArrayList<TaskSchedulerListener> schedulerListeners;
    ThreadPoolExecutor poolExecutor;

    public TaskScheduler(){
        this.tasks = new ArrayList<>();
        this.schedulerListeners = new ArrayList<>();
        this.poolExecutor = new ThreadPoolExecutor(2, 10, 5000, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
    }

    public synchronized Future submitFutureTask(Task task){
        registerTask(task);
        Future f = this.poolExecutor.submit(task);
        Logger.getLogger("TaskScheduler").info("Task \"" + task.getName() + "\" Submitted To Thread Pool Executor");
        return f;
    }

    public void registerTask(Task task){
        this.tasks.add(task);
        task.registerTaskListener(this);
        for (TaskSchedulerListener schedulerListener : schedulerListeners) {
            schedulerListener.onTaskAdded(task);
        }
        Logger.getLogger("TaskScheduler").info("Task \"" + task.getName() + "\" Registered");
    }

    public synchronized void removeTask(Task task){
        for (TaskSchedulerListener schedulerListener : this.schedulerListeners) {
            schedulerListener.onTaskRemoved(task);
        }
        this.tasks.remove(task);
        Logger.getLogger("TaskScheduler").info("Task \"" + task.getName() + "\" Removed");
    }


    public void registerSchedulerListener(TaskSchedulerListener listener){
        this.schedulerListeners.add(listener);
    }

    public void removeSchedulerListener(TaskSchedulerListener listener){
        this.schedulerListeners.remove(listener);
    }

    @Override
    public void onTaskProgress(Task task) {}

    @Override
    public void onTaskStart(Task task, int steps) {}

    @Override
    public void onTaskStepsAdded(Task task, int steps) {}

    @Override
    public void onTaskComplete(Task task) {
        removeTask(task);
    }
}
