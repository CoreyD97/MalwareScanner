package com.coreyd97.antivirus.client.ui;

import com.coreyd97.antivirus.common.exception.TreePathException;
import com.coreyd97.antivirus.common.taskscheduler.ScanTask;
import com.coreyd97.antivirus.common.taskscheduler.ScanTaskFileListener;
import com.coreyd97.antivirus.common.utils.MalwareStateTree;
import com.coreyd97.antivirus.common.utils.ScanStateTree;
import com.coreyd97.antivirus.common.utils.Utils;
import org.apache.commons.io.FileUtils;
import org.jdesktop.swingx.treetable.FileSystemModel;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

//TODO Write notes on evolution of this class. From boolean values, to enum to including scan results
public class ScanTreeTableModel extends FileSystemModel implements ScanTaskFileListener {

    private final ScanTask scanTask;
    private ScanStateTree stateTree;
    private MalwareStateTree malwareTree;
    private final File topLevel;
    private List<String> includedFiles;

    public ScanTreeTableModel(ScanTask task){
        super(task.getStartFiles().length > 1 ? task.getStartFiles()[0].getParentFile() : task.getStartFiles()[0]);
        includedFiles = new ArrayList<>();
        if(task.getStartFiles().length > 1) { //Multi select
            this.topLevel = task.getStartFiles()[0].getParentFile();
            for (File startFile : task.getStartFiles()) {
                includedFiles.add(startFile.getName());
            }
        }else{ //Single select
            File selected = task.getStartFiles()[0];
            if(selected.isDirectory()){
                this.topLevel = selected;
                this.includedFiles = null;
            }else{
                this.topLevel = selected.getParentFile();
                this.includedFiles.add(selected.getName());
            }
        }
        this.stateTree = ScanStateTree.createTree(this.topLevel);
        this.malwareTree = MalwareStateTree.createTree(this.topLevel);
        this.scanTask = task;
        this.scanTask.registerFileListener(this);
        this.scanTask.registerFileListener(stateTree);
    }

    public void dispose() {
        this.scanTask.removeFileListener(stateTree);
    }

    @Override
    public int getColumnCount() {
        return 3;
    }

    @Override
    public Class<?> getColumnClass(int column) {
        return String.class;
    }

    @Override
    public String getColumnName(int column) {
        switch(column){
            case 0: return "File";
            case 1: return "Scan Status";
            case 2: return "Result";
            default: return "";
        }
    }



    @Override
    public Object getValueAt(Object node, int column) {
        if(node instanceof File) {
            switch (column) {
                case 0:
                    return ((File) node).getName();
                case 1:{
                    try {
                        if(FileUtils.isSymlink((File) node)){
                            return "Symlink : Ignored";
                        }
                    } catch (IOException e) {}

                    try {
                        return stateTree.getState(((File) node).getAbsolutePath());
                    } catch (TreePathException e) {
                        return null;
                    }
                }
                case 2:{
                    try {
                        if(this.malwareTree.hasMalware(((File) node).getAbsolutePath())){
                            return "MALWARE";
                        }else{
                            return "";
                        }
                    } catch (TreePathException e) {}
                }
            }
        }
        return null;
    }

    @Override
    public File getChild(Object parent, int index) {
        if(parent.equals(this.topLevel) && this.includedFiles != null){
            File parentFile = (File) parent;
            if(includedFiles.size() > 0){
                return new File(parentFile, includedFiles.get(index));
            }
        }else{
            return super.getChild(parent, index);
        }
        return null;
    }

    @Override
    public int getChildCount(Object parent) {
        if (parent instanceof File) {
            String[] children = ((File) parent).list();

            if (children != null) {
                if(parent.equals(topLevel) && includedFiles != null){
                    return includedFiles.size();
                }
                return children.length;
            }
        }

        return 0;
    }

    @Override
    public void onDirectoryEntered(File directory) {}

    @Override
    public void onFileScanned(File file) {}

    @Override
    public void onAnalysisReceived(File file, Utils.FileStatus status) {
        if(status == Utils.FileStatus.MALWARE){
            this.malwareTree.addMalware(file.getAbsolutePath());
        }
    }

    @Override
    public void onDirectoryLeft(File directory) {}
}
