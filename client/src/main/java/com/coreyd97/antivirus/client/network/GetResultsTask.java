package com.coreyd97.antivirus.client.network;

import com.coreyd97.antivirus.client.engine.ScanManager;
import com.coreyd97.antivirus.common.report.IReportAdapter;
import com.coreyd97.antivirus.common.report.Report;
import com.coreyd97.antivirus.common.report.ResultsReport;
import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.taskscheduler.NetworkTask;
import com.google.gson.*;

import javax.swing.*;
import java.io.IOException;
import java.util.UUID;


//TODO Report Handler for ResultsReports
public class GetResultsTask extends NetworkTask {
    ScanManager scanManager;
    UUID uuids[];

    public GetResultsTask(ClientNetworkController networkController, ScanManager scanManager, UUID uuids[]) {
        super("Get Analysis Results", networkController);
        this.scanManager = scanManager;
        this.uuids = uuids;
    }

    @Override
    protected Object interact() throws IOException {
        Gson gson = new GsonBuilder().registerTypeAdapter(Report.class, new IReportAdapter()).create();
        JsonParser jsonParser = new JsonParser();
        taskAddSteps(uuids.length);
        output.println("Results");
        for (UUID uuid : uuids) {
            output.println(uuid);
            String result = input.readLine();
            if(result.equals("CLEAN")){
                scanManager.resultsReceived(uuid);
            }else if(result.equals("PENDING")) {

            }else if(result.equals("UNKNOWN")) {
                //TODO Handle "lost" scan report.
            }else{
                try {
                    JsonObject jsonObject = (JsonObject) jsonParser.parse(result);
                    //TODO combine results into single report.
                    ResultsReport resultsReport = (ResultsReport) gson.fromJson(jsonObject, Report.class);

                    SwingUtilities.invokeLater(() -> {
                        resultsReport.display();
                    });

                    scanManager.resultsReceived(uuid);
                }catch (JsonParseException parseException){
                    //TODO Handle malformed response
                }
            }
            taskProgress();
        }
        output.println("END");
        return true;
    }

    @Override
    protected Object onFailure() {
        return false;
    }
}
