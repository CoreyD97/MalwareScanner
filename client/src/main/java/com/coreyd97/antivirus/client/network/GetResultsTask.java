package com.coreyd97.antivirus.client.network;

import com.coreyd97.antivirus.common.network.ServerConnectionHandler;
import com.coreyd97.antivirus.common.report.*;
import com.coreyd97.antivirus.common.taskscheduler.NetworkTask;
import com.google.gson.*;

import java.io.IOException;
import java.util.ArrayList;
import java.util.UUID;


//TODO Report Handler for ResultsReports
public class GetResultsTask extends NetworkTask<ArrayList<UUID>> implements ReportPublisher {
    private ReportHandler reportHandler;
    private UUID uuids[];
    private ArrayList<UUID> completedUUIDs;

    public GetResultsTask(ServerConnectionHandler networkController, UUID uuids[]) {
        super("Get Analysis Results", networkController);
        this.uuids = uuids;
        this.completedUUIDs = new ArrayList<>();
    }

    @Override
    protected ArrayList<UUID> interact() throws IOException {
        Gson gson = new GsonBuilder().registerTypeAdapter(Report.class, new IReportAdapter()).create();
        JsonParser jsonParser = new JsonParser();
        taskAddSteps(uuids.length);
        output.println("Results");
        for (UUID uuid : uuids) {
            output.println(uuid);
            String result = input.readLine();
            if(result.equals("CLEAN")){
                completedUUIDs.add(uuid);
            }else if(result.equals("PENDING")) {

            }else if(result.equals("UNKNOWN")) {
                //TODO Handle "lost" scan scanReport.
            }else{
                try {
                    JsonObject jsonObject = (JsonObject) jsonParser.parse(result);
                    ResultsReport resultsReport = (ResultsReport) gson.fromJson(jsonObject, Report.class);
                    if(reportHandler != null){
                        reportHandler.onReportReady(resultsReport);
                    }
                    this.completedUUIDs.add(resultsReport.getUUID());
                }catch (JsonParseException parseException){
                    //TODO Handle malformed response
                }
            }
            taskProgress();
        }
        output.println("END");
        return completedUUIDs;
    }

    @Override
    protected ArrayList<UUID> onFailure() {
        return completedUUIDs;
    }

    @Override
    public void setReportHandler(ReportHandler reportHandler) {
        this.reportHandler = reportHandler;
    }

    @Override
    public int getPriority() {
        return 95; //Not as important as submitting new scans but more important than explanations.
    }
}
