package com.coreyd97.antivirus.client.engine;

import com.coreyd97.antivirus.client.network.ClientNetworkController;
import com.coreyd97.antivirus.client.taskscheduler.TaskScheduler;
import com.coreyd97.antivirus.common.engine.ClientScannerEngine;
import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.taskscheduler.FileTask;
import com.coreyd97.antivirus.common.taskscheduler.Task;
import com.coreyd97.antivirus.common.taskscheduler.TaskListener;

import java.io.File;
import java.util.concurrent.Future;

public class ScanManager implements TaskListener {
    private final ClientNetworkController networkController;
    private final TaskScheduler scheduler;


    public ScanManager(ClientNetworkController networkController, TaskScheduler taskScheduler){
        this.networkController = networkController;
        this.scheduler = taskScheduler;
    }

    public void updateScanSchedule(){
        //TODO Create and Update Scan Schedule
    }

    public Future<ScanReport> requestScan(ClientScannerEngine scannerEngine, File[] files){
        FileTask task = scannerEngine.generateScanTask(files);
        return scheduler.submitFutureTask(task);
    }

    public FileTask scanNow(ClientScannerEngine scannerEngine, File[] files){
        FileTask task = scannerEngine.generateScanTask(files);
        scheduler.registerTask(task);
        return task;
    }

    @Override
    public void onTaskStart(Task task, int steps) {}

    @Override
    public void onTaskStepsAdded(Task task, int steps) {}

    @Override
    public void onTaskProgress(Task task) {}

    @Override
    public void onTaskComplete(Task task) {
        //Submit Scan Report for analysis
        //Create thread to monitor for response.
    }
}
