package com.coreyd97.antivirus.client.engine;

import com.coreyd97.antivirus.client.network.ClientNetworkController;
import com.coreyd97.antivirus.client.network.GetResultsTask;
import com.coreyd97.antivirus.client.network.SubmitScanReportTask;
import com.coreyd97.antivirus.common.engine.ClientDetectionModule;
import com.coreyd97.antivirus.common.report.ResultsReport;
import com.coreyd97.antivirus.common.taskscheduler.*;
import com.coreyd97.antivirus.common.report.Report;
import com.coreyd97.antivirus.common.report.ReportHandler;
import com.coreyd97.antivirus.common.report.ScanReport;

import java.io.File;
import java.util.HashMap;
import java.util.HashSet;
import java.util.UUID;
import java.util.concurrent.Future;
import java.util.logging.Logger;

public class ScanManager extends Thread implements TaskStatusListener<ScanTask>, ReportHandler<ScanReport> {
    private final ClientNetworkController networkController;
    private final TaskScheduler scheduler;
    private final HashMap<UUID, ScanTask> activeScans;
    private final HashSet<UUID> reportsPendingAnalysis;
    private boolean isGettingResults = false;
    private GetResultsTask resultsTask;


    public ScanManager(ClientNetworkController networkController, TaskScheduler taskScheduler){
        this.networkController = networkController;
        this.scheduler = taskScheduler;
        this.activeScans = new HashMap<>();
        this.reportsPendingAnalysis = new HashSet<>();
    }

    public void updateScanSchedule(){
        //TODO Create and Update Scan Schedule
    }


    //Register request for a scan with the scheduler. This will be executed when scheduler is ready.
    public Future<ScanReport> requestScan(ClientDetectionModule scannerEngine, File[] files){
        ScanTask task = scannerEngine.generateScanTask(files);
        task.setReportHandler(this);
        task.registerStatusListener(this);
        return scheduler.submitFutureTask(task, true);
    }

    @Override
    public void onReportReady(final ScanReport report) {
        //Submit for analysis and register pending scanReport
        SubmitScanReportTask submissionTask = new SubmitScanReportTask(networkController, report);
        submissionTask.setCallback(new Runnable() {
            @Override
            public void run() {
                if(submissionTask.getResult()){
                    synchronized (reportsPendingAnalysis) {
                        reportsPendingAnalysis.add(report.getUUID());
                    }
                }else{
                    //TODO Handle reports which were not submitted!
                    Logger.getLogger("ScanManager").warning("Scan scanReport could not be submitted!");
                }
            }
        });
        scheduler.submitFutureTask(submissionTask, false);
    }

    @Override
    public void onTaskStart(ScanTask task, int steps) {
        synchronized (this.activeScans){
            //Create new results scanReport to combine individual scan scanReport results.
            this.activeScans.put(task.getUUID(), task);
        }
    }

    @Override
    public void onTaskStepsAdded(ScanTask task, int steps) {}
    @Override
    public void onTaskProgress(ScanTask task) {}

    @Override
    public void onTaskComplete(ScanTask task) {
        synchronized (this.activeScans) {
            if(this.activeScans.remove(task.getUUID()) != null){
                //Scan complete and results returned.
                task.getResult().display();
            }
        }
    }

    @Override
    public void run() {
        while(true){
            if(!isGettingResults && reportsPendingAnalysis.size() > 0){
                UUID uuids[] = reportsPendingAnalysis.toArray(new UUID[]{});
                resultsTask = new GetResultsTask(networkController, uuids);
                resultsTask.setReportHandler(new ReportHandler() {
                    @Override
                    public void onReportReady(Report report) {
                        ScanTask scanTask = ScanManager.this.activeScans.get(((ResultsReport) report).getTaskUUID());
                        if(scanTask != null){
                            scanTask.processAnalysisReport((ResultsReport) report);
                        }else{
                            //TODO Handle scanReport for unknown ScanTask
                        }
                        ScanManager.this.reportsPendingAnalysis.remove(report.getUUID());
                    }
                });
                resultsTask.setCallback(new Runnable() {
                    @Override
                    public void run() {
                        ScanManager.this.isGettingResults = false;
                    }
                });
                isGettingResults = true;
                scheduler.submitFutureTask(resultsTask, true);
            }

            try {
                Thread.sleep(5000);
            } catch (InterruptedException ignored) {}
        }
    }
}
