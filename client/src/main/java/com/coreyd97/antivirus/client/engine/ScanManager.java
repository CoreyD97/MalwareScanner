package com.coreyd97.antivirus.client.engine;

import com.coreyd97.antivirus.client.network.ClientNetworkController;
import com.coreyd97.antivirus.client.network.GetResultsTask;
import com.coreyd97.antivirus.client.network.SubmitReportTask;
import com.coreyd97.antivirus.common.engine.ClientDetectionModule;
import com.coreyd97.antivirus.common.taskscheduler.TaskScheduler;
import com.coreyd97.antivirus.common.report.Report;
import com.coreyd97.antivirus.common.report.ReportHandler;
import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.taskscheduler.FileTask;
import com.coreyd97.antivirus.common.taskscheduler.Task;
import com.coreyd97.antivirus.common.taskscheduler.TaskListener;

import java.io.File;
import java.util.HashMap;
import java.util.UUID;
import java.util.concurrent.Future;
import java.util.logging.Logger;

public class ScanManager extends Thread implements TaskListener, ReportHandler {
    private final ClientNetworkController networkController;
    private final TaskScheduler scheduler;
    private final HashMap<UUID, FileTask> activeScans;
    private final HashMap<UUID, Report> pendingReports;


    public ScanManager(ClientNetworkController networkController, TaskScheduler taskScheduler){
        this.networkController = networkController;
        this.scheduler = taskScheduler;
        this.activeScans = new HashMap<>();
        this.pendingReports = new HashMap<>();
    }

    public void updateScanSchedule(){
        //TODO Create and Update Scan Schedule
    }


    //Register request for a scan with the scheduler. This will be executed when scheduler is ready.
    public Future<ScanReport> requestScan(ClientDetectionModule scannerEngine, File[] files){
        FileTask task = scannerEngine.generateScanTask(files);
        task.setReportHandler(this);
        task.registerTaskListener(this);
        return scheduler.submitFutureTask(task);
    }

    //Create and return scan task ready for manual start
    public FileTask scanNow(ClientDetectionModule scannerEngine, File[] files){
        FileTask task = scannerEngine.generateScanTask(files);
        task.setReportHandler(this);
        task.registerTaskListener(this);
        scheduler.registerTask(task);
        return task;
    }

    @Override
    public void onReportReady(final Report report) {
        //Submit for analysis and register pending report
        new Thread(() -> {
            SubmitReportTask submissionTask = new SubmitReportTask(networkController, (ScanReport) report);
            scheduler.registerTask(submissionTask);
            boolean wasRegistered = false;
            try{
                wasRegistered = (boolean) submissionTask.call();
            }catch (Exception ignore){}

            if(wasRegistered) {
                synchronized (pendingReports) {
                    pendingReports.put(report.getUUID(), report);
                }
            }else{
                //TODO Add failsafe for reports which could not be submitted
                Logger.getLogger("Submission").warning("Report could not be submitted! We need to handle this!");
            }
        }).start();
    }

    public void resultsReceived(UUID uuid) {
        synchronized (this.pendingReports){
            this.pendingReports.remove(uuid);
        }
    }

    @Override
    public void onTaskStart(Task task, int steps) {
        synchronized (this.activeScans){
            this.activeScans.put(task.getUUID(), (FileTask) task);
        }
    }

    @Override
    public void onTaskStepsAdded(Task task, int steps) {}
    @Override
    public void onTaskProgress(Task task) {}

    @Override
    public void onTaskComplete(Task task) {
        synchronized (this.activeScans) {
            this.activeScans.remove(task.getUUID(), task);
        }
    }

    @Override
    public void run() {
        while(true){
            if(pendingReports.keySet().size() > 0) {
                UUID uuids[] = pendingReports.keySet().toArray(new UUID[]{});
                GetResultsTask resultsTask = new GetResultsTask(networkController, this, uuids);
                scheduler.registerTask(resultsTask);

                try {
                    resultsTask.call();
                } catch (Exception e) {}
            }

            try {
                Thread.sleep(5000);
            } catch (InterruptedException ignored) {}
        }
    }
}
