package com.coreyd97.antivirus.client.engine;

import com.coreyd97.antivirus.common.engine.ClientDetectionModule;
import com.coreyd97.antivirus.common.report.FileFeatures;
import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.taskscheduler.ScanTask;
import com.coreyd97.antivirus.common.utils.ImportStatsUtils;
import com.github.katjahahn.parser.FileFormatException;
import com.github.katjahahn.parser.PEData;
import com.github.katjahahn.parser.PELoader;
import com.github.katjahahn.parser.sections.SectionLoader;
import com.github.katjahahn.parser.sections.idata.ImportDLL;
import com.github.katjahahn.parser.sections.idata.ImportSection;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class ImportStatsDetectionModule extends ClientDetectionModule {
    public static final String engineName = "Function Import Heuristic";

    public ImportStatsDetectionModule(ScanManager scanManager){
        super(engineName);
    }

    @Override
    public ScanTask generateScanTask(File[] files) {
        return new ImportStatsScanTask("Heuristic Scan", files, ScanTask.ScanType.SCAN);
    }

    @Override
    public ScanTask generateExplainTask(File[] files) {
        return new ImportStatsScanTask("Heuristic Explanation", files, ScanTask.ScanType.EXPLAIN);
    }

    private class ImportStatsScanTask extends ScanTask {

        ImportStatsScanTask(String taskName, File files[], ScanType scanType){
            super(taskName, files, ImportStatsDetectionModule.this, scanType);
        }

        @Override
        protected boolean processFile(File file) {
            try {
                PEData data = PELoader.loadPE(file);
                SectionLoader sectionLoader = new SectionLoader(data);
                ImportSection section = sectionLoader.loadImportSection();
                HashMap<String, ArrayList<String>> dllFunctions = ImportStatsUtils.convertToImportMap(section.getImports());

                //Add filefeatures with list type DllFunction.
                FileFeatures fileFeatures = new FileFeatures(file);
                fileFeatures.setMapOfLists(dllFunctions);

                report.addFileFeatures(fileFeatures);
            } catch (IOException | IllegalStateException e) {
                String cause; //Not currently used
                if (e instanceof FileFormatException) {
                    cause = "Invalid PE32 File. ";
                } else if (e instanceof IllegalStateException) {
                    cause = "Could not find import section. ";
                } else {
                    cause = "Could not open file. ";
                }
                return false;
            }
            return true;
        }
    }
}
