package com.coreyd97.antivirus.client.engine;

import com.coreyd97.antivirus.common.engine.ClientDetectionModule;
import com.coreyd97.antivirus.common.report.ScanReport;
import com.coreyd97.antivirus.common.taskscheduler.FileTask;
import com.github.katjahahn.parser.PEData;
import com.github.katjahahn.parser.PELoader;
import com.github.katjahahn.parser.sections.SectionLoader;
import com.github.katjahahn.parser.sections.idata.ImportDLL;
import com.github.katjahahn.parser.sections.idata.ImportSection;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class ImportStatsDetectionModule extends ClientDetectionModule {
    public static final String engineName = "Function Import Heuristic";

    public ImportStatsDetectionModule(){
        super(engineName);
    }

    @Override
    public FileTask generateScanTask(File[] files) {
        return new ImportStatsScanTask("Heuristic Scan", files, new ScanReport(engineName));
    }


    private class ImportStatsScanTask extends FileTask {

        ImportStatsScanTask(String taskName, File files[], ScanReport report){
            super(taskName, files, report);
        }

        @Override
        protected void processFile(File file) {
            try {
                PEData data = PELoader.loadPE(file);
                SectionLoader sectionLoader = new SectionLoader(data);
                ImportSection section = sectionLoader.loadImportSection();
                List<ImportDLL> imports = section.getImports();
                ((ScanReport) report).addFile(file, imports);

            } catch (IOException | IllegalStateException e) {
//                String cause;
//                if (e instanceof FileFormatException) {
//                    cause = "Invalid PE32 File. ";
//                } else if (e instanceof IllegalStateException) {
//                    cause = "Could not find import section. ";
//                } else {
//                    cause = "Could not open file. ";
//                }
//                ((TrainReport) this.report).addFailedSample(cause, file.getAbsolutePath());
            }
        }
    }
}
