package com.coreyd97.antivirus.client;

import com.coreyd97.antivirus.client.engine.ScanManager;
import com.coreyd97.antivirus.client.network.ClientNetworkController;
import com.coreyd97.antivirus.client.taskscheduler.TaskScheduler;
import com.coreyd97.antivirus.client.ui.AntiVirusUI;
import com.coreyd97.antivirus.common.AntiVirusOptions;
import com.coreyd97.antivirus.common.engine.ScannerEngine;
import com.coreyd97.antivirus.common.utils.Utils;
import org.reflections.Reflections;

import javax.swing.*;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class AntiVirus {
    private static AntiVirus instance;
    private AntiVirusUI ui;
    private AntiVirusOptions options;
    private Map<String, Class<? extends ScannerEngine>> scannerEngines;
    private final TaskScheduler taskScheduler;
    private final ScanManager scanManager;
    private final ClientNetworkController networkController;

    public static void main(String[] args) {
        getInstance();

        SwingUtilities.invokeLater(() -> {
            instance.ui = new AntiVirusUI();
        });
    }

    private AntiVirus() {
        this.options = new AntiVirusOptions();
        String address = this.options.getValue("server.address", String.class, "0.0.0.0");
        InetAddress serveraddress = null;
        try {
            serveraddress = InetAddress.getByName(address);
        } catch (UnknownHostException e) {}
        short serverport = this.options.getValue("server.port", Integer.class, 4397).shortValue();


        this.loadScannerEngines();
        this.taskScheduler = new TaskScheduler();
        this.networkController = new ClientNetworkController(serveraddress, serverport, this.taskScheduler);
        this.scanManager = new ScanManager(this.networkController, this.taskScheduler);
    }

    private void loadScannerEngines() {
        this.scannerEngines = new HashMap<>();
        Reflections reflections = new Reflections("com.coreyd97.antivirus.client.engine");
        Set<Class<? extends ScannerEngine>> scannerEngines = reflections.getSubTypesOf(ScannerEngine.class);
        for (Class<? extends ScannerEngine> scannerEngine : scannerEngines) {
            if(Modifier.isAbstract(scannerEngine.getModifiers())) continue;
            String name; //Try to get engine name defined in class. Otherwise use file name.
            try {
                Field f = scannerEngine.getField("engineName");
                name = (String) f.get(null);
            } catch (NoSuchFieldException | IllegalAccessException e) {
                name = scannerEngine.getName();
            }
            this.scannerEngines.put(name, scannerEngine);
        }
    }

    public AntiVirusOptions getOptions() {
        return options;
    }

    public void shutdown(){
        System.exit(0);
    }

    public static AntiVirus getInstance() {
        if (instance == null) instance = new AntiVirus();
        return instance;
    }

    public AntiVirusUI getUI() {
        return ui;
    }

    public TaskScheduler getTaskScheduler() {
        return taskScheduler;
    }

    public Map<String, Class<? extends ScannerEngine>> getScannerEngines() {
        return scannerEngines;
    }

    public ClientNetworkController getNetworkController() {
        return networkController;
    }

    @Deprecated
    public ScannerEngine createScannerEngine(String engineName) {
        if(scannerEngines.containsKey(engineName)){
            try {
                return scannerEngines.get(engineName).newInstance();
            } catch (InstantiationException | IllegalAccessException e) {
                Utils.error("Scanner Engine Error", "Unable to set selected scanner engine. Scanning and training will not be possible until selected.");
            }
        }

        return null;
    }

    public ScanManager getScanManager() {
        return scanManager;
    }
}
