package com.coreyd97.antivirus.common.report;

import com.google.gson.*;

import java.lang.reflect.Type;

public class IReportAdapter implements JsonSerializer<Report>, JsonDeserializer<Report> {

    @Override
    public JsonElement serialize(Report report, Type type, JsonSerializationContext context) {
        JsonObject object;

        if(report instanceof ScanReport){
            object = (JsonObject) context.serialize(report, ScanReport.class);
            object.addProperty("type", "ScanReport");
//            object.addProperty("engine", ((ScanReport) report).getScannerModule().getEngineName());
//            JsonArray fileArray = new JsonArray();
//            for (FileFeatures fileFeature : ((ScanReport) report).getFileFeatures()) {
//                JsonObject fileObject = new JsonObject();
//                fileObject.addProperty("path", fileFeature.filePath);
//                fileObject.addProperty("size", fileFeature.fileSize);
//                if(fileFeature.featureList != null && fileFeature.featureList.size() != 0){
//                    JsonArray featureList = new JsonArray();
//                    for (Object feature : fileFeature.featureList) {
//                        featureList.add(feature.toString());
//                    }
//                    fileObject.add("features", featureList);
//                }
//                if(fileFeature.featureMap != null &&  fileFeature.featureMap.size() != 0){
//                    JsonObject featureMap = new JsonObject();
//                    fileFeature.featureMap.forEach(featureMap::addProperty);
//                    fileObject.add("features", featureMap);
//                }
//                fileArray.add(fileObject);
//            }
//            object.add("files", fileArray);
        }else if(report instanceof TrainReport){
            object = (JsonObject) context.serialize(report, TrainReport.class);
            object.addProperty("type", "TrainReport");
        }else if(report instanceof ResultsReport){
            object = (JsonObject) context.serialize(report, ResultsReport.class);
            object.addProperty("type", "ResultsReport");
        }else{
            return null;
        }
        return object;
    }

    @Override
    public Report deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        switch (((JsonObject) json).get("type").getAsString()) {
            case "ScanReport": {
                return context.deserialize(json, ScanReport.class);
            }
            case "TrainReport": {
                return context.deserialize(json, TrainReport.class);
            }
            case "ResultsReport": {
                return context.deserialize(json, ResultsReport.class);
            }
        }
        return null;
    }
}
