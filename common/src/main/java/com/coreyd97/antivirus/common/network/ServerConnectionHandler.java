package com.coreyd97.antivirus.common.network;

import com.coreyd97.antivirus.common.engine.CryptoManager;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

public class ServerConnectionHandler {
    private InetAddress serverAddress;
    private short port;
    protected final CryptoManager cryptoManager;
    protected final PublicKey serverKey;

    public ServerConnectionHandler(InetAddress serverAddress, short serverPort, String serverKey, CryptoManager cryptoManager) throws NoSuchAlgorithmException, InvalidKeySpecException {
        this.serverAddress = serverAddress;
        this.port = serverPort;
        this.cryptoManager = cryptoManager;

        KeyFactory factory = KeyFactory.getInstance("RSA");
        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(Base64.getDecoder().decode(serverKey));
        this.serverKey = factory.generatePublic(publicKeySpec);
    }

    public Socket establishConnection() throws IOException {
        return new Socket(serverAddress, port);
    }

    public InetAddress getServerAddress() {
        return serverAddress;
    }

    public void setServerAddress(InetAddress serverAddress) {
        this.serverAddress = serverAddress;
    }

    public short getPort() {
        return port;
    }

    public void setPort(short port) {
        this.port = port;
    }

    public byte[] encrypt(byte[] msg, SecretKey symmetric) throws GeneralSecurityException {
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, symmetric);
        return cipher.doFinal(msg);
    }

    public byte[] encryptPKI(byte[] msg, Key publicKey) throws GeneralSecurityException {
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        return cipher.doFinal(msg);
    }

    public byte[] decrypt(byte[] msg, SecretKey symmetric) throws GeneralSecurityException {
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.DECRYPT_MODE, symmetric);
        return cipher.doFinal(msg);
    }

    public byte[] decryptPKI(byte[] msg, Key privateKey) throws GeneralSecurityException {
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        return cipher.doFinal(msg);
    }

    public PublicKey getPublicKey() {
        return this.cryptoManager.getPublicKey();
    }

    public PrivateKey getPrivateKey() {
        return this.cryptoManager.getPrivateKey();
    }

    public PublicKey getServerPublicKey() {
        return this.serverKey;
    }

    public SecretKey generateSessionKey() throws GeneralSecurityException {
        return this.cryptoManager.generateSessionKey();
    }
}
