package com.coreyd97.antivirus.common.utils;

import org.apache.commons.io.FileUtils;

import javax.swing.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.security.DigestInputStream;
import java.security.MessageDigest;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;

public class Utils {
    public enum HashType {MD5, SHA1}

    public static String timeString(long l) {
        if(l < 1000)
            return String.format("%dms", l);
        if(l < 60000){
            return String.format("%ds %dms", TimeUnit.MILLISECONDS.toSeconds(l),
                    l - TimeUnit.SECONDS.toMillis(TimeUnit.MILLISECONDS.toSeconds(l)));
        }else
            return String.format("%dmin %ds", TimeUnit.MILLISECONDS.toMinutes(l),
                    TimeUnit.MILLISECONDS.toSeconds(l) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(l)));
    }

    public enum FileStatus {CLEAN, MALWARE}

    public static void showMessage(String title, String message){
        JOptionPane.showMessageDialog(null, message, title, JOptionPane.INFORMATION_MESSAGE, null);
        Logger.getLogger("UI").warning(title + " - " + message);
    }

    public static String fileChecksum(MessageDigest md, File file) throws IOException {
        FileInputStream fileInputStream = new FileInputStream(file);
        byte[] buffer = new byte[2048];
        DigestInputStream digestStream = new DigestInputStream(fileInputStream, md);
        while (digestStream.read(buffer) != -1);
        digestStream.close();

        byte[] digest = md.digest();
        StringBuilder sb = new StringBuilder();
        for (byte b : digest) {
            sb.append(String.format("%02X", b));
        }
        return sb.toString();
    }

    public static File[] fileChooser(String title, int selectionMode, boolean multiSelect, String confirmButtonText){
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle(title);
        chooser.setFileSelectionMode(selectionMode);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setMultiSelectionEnabled(multiSelect);
        chooser.setFileHidingEnabled(false);
        chooser.setApproveButtonText(confirmButtonText);

        int val = chooser.showOpenDialog(null);
        if(val == JFileChooser.CANCEL_OPTION) return null;
        if(multiSelect){
            return chooser.getSelectedFiles();
        } else {
            return new File[]{chooser.getSelectedFile()};
        }
    }

    public static FileStatus cleanOrDirtyConfirmation(){
            int res = JOptionPane.showOptionDialog(null,
                    "Are the selected files clean, or dirty (infected)?",
                    "Training Type",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    new String[]{"Clean", "Dirty"},
                    "Dirty");
            return res == JOptionPane.YES_OPTION ? FileStatus.CLEAN : FileStatus.MALWARE;
    }

    public static int countFiles(File files[]){
        int count = 0;
        for (File file : files) {
            if(file.isDirectory()){
                try {
                    if(FileUtils.isSymlink(file)){
                        continue;
                    }
                } catch (IOException ignored) {}
                File[] children = file.listFiles();
                if(children != null) {
                    count += countFiles(children);
                }
            }else{
                //Fill scanReport with file features
                count++;
            }
        }
        return count;
    }
}
