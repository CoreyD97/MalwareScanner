package com.coreyd97.antivirus.common.taskscheduler;

import java.util.ArrayList;
import java.util.concurrent.*;
import java.util.logging.Logger;

public class TaskScheduler extends ThreadPoolExecutor {
    ArrayList<Task> tasks;
    ArrayList<TaskSchedulerListener> schedulerListeners;

    public TaskScheduler(){
        super(10, 10, 5000, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(), new TaskSchedulerThreadFactory());
        this.tasks = new ArrayList<>();
        this.schedulerListeners = new ArrayList<>();
    }


    public void submit(Task task) {
        if(task instanceof ThreadedTask){
            ((ThreadedTask) task).setExecutorService(this);
        }
        this.tasks.add(task);
        for (TaskSchedulerListener schedulerListener : schedulerListeners) {
            schedulerListener.onTaskAdded(task);
        }
        Logger.getLogger("TaskScheduler").info("Task \"" + task.getName() + "\" Submitted and Registered with " + schedulerListeners.size() + " listeners.");
        super.execute(task);
    }


    @Override
    protected void afterExecute(Runnable runnable, Throwable throwable) {
        super.afterExecute(runnable, throwable);
        if(runnable instanceof Task) {
            for (TaskSchedulerListener schedulerListener : this.schedulerListeners) {
                schedulerListener.onTaskRemoved((Task) runnable);
            }
            this.tasks.remove(runnable);
            Logger.getLogger("TaskScheduler").info("Task \"" + ((Task) runnable).getName() + "\" Removed");

            if (throwable != null){
                synchronized (this.schedulerListeners){
                    for (TaskSchedulerListener schedulerListener : this.schedulerListeners) {
                        schedulerListener.onTaskException((Task) runnable, throwable);
                    }
                }
                ((Task) runnable).onError(throwable);
            }
        }
    }


    public void registerSchedulerListener(TaskSchedulerListener listener){
        this.schedulerListeners.add(listener);
    }

    public void removeSchedulerListener(TaskSchedulerListener listener){
        this.schedulerListeners.remove(listener);
    }

}
