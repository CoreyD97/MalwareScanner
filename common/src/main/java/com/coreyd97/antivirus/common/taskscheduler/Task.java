package com.coreyd97.antivirus.common.taskscheduler;

import java.util.ArrayList;
import java.util.UUID;

public abstract class Task<T> implements Runnable {
    //TODO Multithreaded tasks.
    private UUID uuid;
    private String name;
    private final ArrayList<TaskStatusListener> statusListeners;
    private final ArrayList<TaskLogListener> logListeners;
    protected T result;
    protected Runnable callback;
    protected boolean completed;

    protected Task(String taskName){
        this.uuid = UUID.randomUUID();
        this.name = taskName;
        this.statusListeners = new ArrayList<>();
        this.logListeners = new ArrayList<>();
    }

    public UUID getUUID() { return this.uuid; }

    protected void setUUID(UUID uuid) { this.uuid = uuid; }

    public String getName() {
        return name;
    }

    public T getResult(){
        return this.result;
    }

    public void setCallback(Runnable callback) {
        this.callback = callback;
        if(completed){
            callback.run();
        }
    }

    public void taskStart(int steps){
        synchronized (this.statusListeners) {
            for (TaskStatusListener taskStatusListener : this.statusListeners) {
                taskStatusListener.onTaskStart(this, steps);
            }
        }
    }

    public void taskAddSteps(int steps){
        synchronized (this.statusListeners) {
            for (TaskStatusListener taskStatusListener : this.statusListeners) {
                taskStatusListener.onTaskStepsAdded(this, steps);
            }
        }
    }

    public void taskProgress(){
        synchronized (this.statusListeners) {
            for (TaskStatusListener taskStatusListener : this.statusListeners) {
                taskStatusListener.onTaskProgress(this);
            }
        }
    }

    public void onError(Throwable throwable){
        synchronized (this.statusListeners) {
            for (TaskStatusListener taskStatusListener : this.statusListeners) {
                taskStatusListener.onTaskException(this, throwable);
            }
        }

        logMessage(TaskLogListener.MessageType.ERROR, throwable.getMessage());
        logMessage(TaskLogListener.MessageType.ERROR, throwable.getStackTrace().toString());
    }

    public void taskComplete(){
        synchronized (this.statusListeners) {
            for (TaskStatusListener taskStatusListener : this.statusListeners) {
                taskStatusListener.onTaskComplete(this);
            }
            this.statusListeners.clear();
        }
    }

    public void registerStatusListener(TaskStatusListener taskStatusListener){
        synchronized (this.statusListeners) {
            this.statusListeners.add(taskStatusListener);
        }
    }

    public void removeStatusListener(TaskStatusListener taskStatusListener){
        synchronized (this.statusListeners) {
            this.statusListeners.remove(taskStatusListener);
        }
    }

    public void logMessage(TaskLogListener.MessageType messageType, String message){
        synchronized (this.logListeners){
            this.logListeners.forEach(taskLogListener -> taskLogListener.onMessageAdded(message, messageType));
        }
    }

    public void registerLogListener(TaskLogListener taskLogListener){
        synchronized (this.logListeners) {
            this.logListeners.add(taskLogListener);
        }
    }

    public void removeLogListener(TaskLogListener taskLogListener){
        synchronized (this.logListeners){
            this.logListeners.remove(taskLogListener);
        }
    }

    public boolean isComplete() {
        return completed;
    }

}

