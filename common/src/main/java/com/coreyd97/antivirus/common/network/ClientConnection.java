package com.coreyd97.antivirus.common.network;

import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.security.*;
import java.util.Base64;

public abstract class ClientConnection extends Thread {
    private final ServerThread serverThread;
    private final Socket socket;
    private final BufferedReader bufferedReader;
    private final PrintWriter outputStream;

    private SecretKey sessionKey;

    public ClientConnection(ServerThread serverThread, Socket clientSocket) throws IOException {
        this.serverThread = serverThread;
        this.socket = clientSocket;
        this.bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        this.outputStream = new PrintWriter(socket.getOutputStream(), true);
    }

    protected void setSessionKey(byte[] encryptionKey) throws GeneralSecurityException {
        this.sessionKey = new SecretKeySpec(encryptionKey, "AES");
    }

    protected void send(String msg) throws GeneralSecurityException {
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, sessionKey);
        byte[] encrypted = cipher.doFinal(msg.getBytes());
        this.outputStream.println(Hex.encodeHexString(encrypted));
    }

    protected String readLine() throws IOException, GeneralSecurityException, DecoderException {
        if(this.bufferedReader == null) return null;
        String encrypted;
        while((encrypted = this.bufferedReader.readLine()) == null){}
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.DECRYPT_MODE, this.sessionKey);
        byte[] decoded = Hex.decodeHex(encrypted);
        byte[] decrypted = cipher.doFinal(decoded);
        return new String(decrypted);
    }

    protected byte[] readLinePKI() throws IOException, GeneralSecurityException, DecoderException {
        if(this.bufferedReader == null) return null;
        String encoded;
        while((encoded = this.bufferedReader.readLine()) == null){}
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.DECRYPT_MODE, this.serverThread.getCryptoManager().getPrivateKey());
        byte[] decoded = Hex.decodeHex(encoded);
        byte[] decrypted = cipher.doFinal(decoded);
        return decrypted;
    }

    protected boolean isClosed(){
        return this.socket == null || this.socket.isClosed();
    }

    protected void endConnection(){
        try {
            if(!this.socket.isClosed())
                this.socket.close();
        } catch (IOException ignored) {}
        try{
            this.bufferedReader.close();
        }catch (IOException ignored){}
        this.outputStream.close();
    }

    protected ServerThread getServerThread() {
        return serverThread;
    }

    protected InetAddress getClientAddress(){
        return this.socket != null ? this.socket.getInetAddress() : null;
    }

    private boolean authorize() throws IOException, GeneralSecurityException, DecoderException {
        String line;
        byte[] sessionKey = readLinePKI();
        setSessionKey(sessionKey);
        //Generate random key
        SecureRandom secureRandom = new SecureRandom();
        int nonce = secureRandom.nextInt(100000000);
        send(String.valueOf(nonce));

        line = readLine(); //Response nonce, should be the same value.
        try{
            Integer resp = Integer.parseInt(line);
            if(resp == nonce){
                send("OK");
                return true;
            }else{
                return false;
            }
        }catch(NumberFormatException e){
            return false;
        }
    }

    @Override
    public void run() {
        try {
            boolean authorized = authorize();
            if (!authorized) {
                this.endConnection();
                return;
            }
            interact();
        }catch (IOException | GeneralSecurityException | DecoderException e){
            e.printStackTrace();
            this.endConnection();
            return;
        }
    }

    protected abstract void interact() throws GeneralSecurityException, IOException, DecoderException;

    public static class ClientNetworkException extends IOException{}
}