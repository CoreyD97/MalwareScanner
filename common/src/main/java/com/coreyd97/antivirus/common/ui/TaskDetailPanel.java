package com.coreyd97.antivirus.common.ui;

import com.coreyd97.antivirus.common.taskscheduler.Task;
import com.coreyd97.antivirus.common.taskscheduler.TaskLogListener;

import javax.swing.*;
import javax.swing.text.*;
import java.awt.*;

public class TaskDetailPanel extends JScrollPane implements TaskLogListener {

    private StyleContext styleContext;
    private JTextPane textPane;
    private final Task task;

    public TaskDetailPanel(Task task){
        this.task = task;
        task.registerLogListener(this);
        styleContext = new StyleContext();
        DefaultStyledDocument document = new DefaultStyledDocument(styleContext);
        Style defaultStyle = styleContext.getStyle(StyleContext.DEFAULT_STYLE);
        StyleConstants.setAlignment(defaultStyle, StyleConstants.ALIGN_LEFT);
        StyleConstants.setFontSize(defaultStyle, 11);
        StyleConstants.setFontFamily(defaultStyle, "serif");

        this.textPane = new JTextPane(document);
        this.textPane.setEditable(false);
        this.setViewportView(this.textPane);
        this.setMinimumSize(new Dimension(0, 100));
        this.setMaximumSize(new Dimension(9999, 100));
        this.setBorder(BorderFactory.createTitledBorder(task.getTaskName()));

        Style errorStyle = styleContext.addStyle("ERROR", null);
        errorStyle.addAttribute(StyleConstants.Foreground, Color.RED);
        errorStyle.addAttribute(StyleConstants.Bold, true);

        Style warningStyle = styleContext.addStyle("WARNING", null);
        warningStyle.addAttribute(StyleConstants.Foreground, Color.ORANGE);

        Style infoStyle = styleContext.addStyle("INFO", null);
        StyleConstants.setForeground(infoStyle, Color.BLUE);
    }


    @Override
    public synchronized void onMessageAdded(String message, MessageType messageType) {
        StyledDocument doc = this.textPane.getStyledDocument();
        try {
            if(messageType == MessageType.LOG){
                doc.insertString(doc.getLength(), message + "\n", styleContext.getStyle(StyleContext.DEFAULT_STYLE));
            }else {
                doc.insertString(doc.getLength(), message + "\n", styleContext.getStyle(messageType.name()));
            }
        } catch (BadLocationException e) {}
        this.textPane.revalidate();
        this.textPane.repaint();
        this.verticalScrollBar.setValue(this.verticalScrollBar.getValue());
//        this.revalidate();
//        this.repaint();
    }

    public void dispose() {
        task.removeLogListener(this);

    }
}
