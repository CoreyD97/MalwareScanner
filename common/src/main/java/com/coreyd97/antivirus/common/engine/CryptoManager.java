package com.coreyd97.antivirus.common.engine;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.io.*;
import java.security.*;
import java.security.interfaces.RSAPrivateCrtKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.RSAPublicKeySpec;
import java.util.Base64;

public class CryptoManager {
    private final KeyPair clientKey;
    private final KeyGenerator aesGenerator;

    public CryptoManager(File keyFile) throws NoSuchAlgorithmException, IOException, InvalidKeySpecException, InvalidKeyException {
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        this.aesGenerator = KeyGenerator.getInstance("AES");
        this.aesGenerator.init(128);

        if(!keyFile.exists()){
            if(!keyFile.getParentFile().exists()) {
                keyFile.getParentFile().mkdirs();
            }
            keyFile.createNewFile();

            KeyPairGenerator kpGen = KeyPairGenerator.getInstance("RSA");
            kpGen.initialize(4096);
            this.clientKey = kpGen.generateKeyPair();

            Base64.Encoder baseEncoder = Base64.getEncoder();
            FileWriter fw = new FileWriter(keyFile);
            fw.write(baseEncoder.encodeToString(this.clientKey.getPrivate().getEncoded()));
            fw.close();
        }else{
            BufferedReader reader = new BufferedReader(new FileReader(keyFile));
            String encoded = reader.readLine();
            PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(Base64.getDecoder().decode(encoded));
            PrivateKey privateKey = keyFactory.generatePrivate(privateKeySpec);
            RSAPublicKeySpec publicKeySpec = new RSAPublicKeySpec(((RSAPrivateCrtKey) privateKey).getModulus(),
                    ((RSAPrivateCrtKey) privateKey).getPublicExponent());

            PublicKey publicKey = keyFactory.generatePublic(publicKeySpec);
            this.clientKey = new KeyPair(publicKey, privateKey);
        }
    }

    public PublicKey getPublicKey(){
        return this.clientKey.getPublic();
    }

    public PrivateKey getPrivateKey(){
        return this.clientKey.getPrivate();
    }

    public SecretKey generateSessionKey() throws GeneralSecurityException {
        return this.aesGenerator.generateKey();
    }
}
