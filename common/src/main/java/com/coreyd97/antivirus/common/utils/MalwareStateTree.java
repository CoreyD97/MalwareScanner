package com.coreyd97.antivirus.common.utils;

import com.coreyd97.antivirus.common.exception.TreePathException;

import java.io.File;
import java.util.Arrays;

public class MalwareStateTree extends StateTree {
    boolean hasMalware;
    private String message;

    protected MalwareStateTree(String nodeName, StateTree parent, boolean isLeaf) {
        super(nodeName, parent, isLeaf);
    }

    public static MalwareStateTree createTree(File file){
        return new MalwareStateTree(file.getAbsolutePath(), null, !file.isDirectory());
    }

    public static MalwareStateTree createTree(String nodeName){
        return new MalwareStateTree(nodeName, null, false);
    }

    @Override
    protected int populateChildren() {
        return 0;
    }

    public boolean hasMalware() {
        if(this.children != null && this.children.size() > 0) {
            for (StateTree childTree : this.children.values()) {
                if(((MalwareStateTree) childTree).hasMalware()) return true;
            }
        }
        return this.hasMalware;
    }

    public boolean hasMalware(String nodePath) throws TreePathException{
        return this.hasMalware(this.toRelPath(nodePath));
    }

    private boolean hasMalware(String[] relPath) {
        if(relPath.length == 0){
            return this.hasMalware();
        }
        if(this.children == null){
            return false;
        }else{
            MalwareStateTree child = (MalwareStateTree) this.children.get(relPath[0]);
            if(child == null) return false;
            return child.hasMalware(Arrays.copyOfRange(relPath, 1, relPath.length));
        }
    }

    @Override
    protected StateTree createChild(String childName, boolean isLeaf) {
        return new MalwareStateTree(childName, this, isLeaf);
    }

    public void addMalware(String nodePath, String message) {
        try {
            this.addMalware(this.toRelPath(nodePath), message);
        } catch (TreePathException e) {}
    }

    private void addMalware(String[] relPath, String message) {
        MalwareStateTree childNode = null;
        if (this.children != null) {
            childNode = (MalwareStateTree) this.children.get(relPath[0]);
        }

        if (childNode == null) {
            childNode = (MalwareStateTree) this.addChild(relPath[0], false);
        }

        childNode.setHasMalware(true);
        if(relPath.length == 1){
            childNode.message = message;
            return; //We do not need to go further. This is our last stop.
        }
        childNode.addMalware(Arrays.copyOfRange(relPath, 1, relPath.length), message);
    }

    public void setHasMalware(boolean hasMalware) {
        this.hasMalware = hasMalware;
    }

    public String getMessage(String absolutePath) throws TreePathException {
        return ((MalwareStateTree) this.getDescendant(this.toRelPath(absolutePath))).getMessage();
    }

    private String getMessage(){
        return this.message;
    }
}

