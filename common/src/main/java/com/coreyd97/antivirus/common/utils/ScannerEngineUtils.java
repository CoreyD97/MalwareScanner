package com.coreyd97.antivirus.common.utils;

import com.coreyd97.antivirus.common.engine.ClientDetectionModule;
import com.coreyd97.antivirus.common.engine.DetectionModule;
import com.coreyd97.antivirus.common.report.TrainReport;
import com.coreyd97.antivirus.common.taskscheduler.ScanTask;
import com.coreyd97.antivirus.common.taskscheduler.TrainTask;
import com.github.plusvic.yara.Yara;
import com.github.plusvic.yara.YaraCompilationCallback;
import com.github.plusvic.yara.YaraCompiler;
import com.github.plusvic.yara.YaraException;

import java.io.File;

public class ScannerEngineUtils {

    public static class RuleImportTask extends TrainTask {
        Yara yara;
        YaraCompiler compiler;

        public RuleImportTask(File[] files, DetectionModule detectionModule, Yara yara, YaraCompiler compiler) {
            super("Yara Rule Import", files, detectionModule);
            this.yara = yara;
            this.compiler = compiler;
        }

        @Override
        protected void processFile(File file) {
            try {
                compiler.addRulesFile(file.getAbsolutePath(), file.getAbsolutePath(), null);
            }catch (YaraException e){}
        }

        @Override
        public void run() {
            YaraCompilationCallback compilationCallback = new YaraCompilationCallback() {
                @Override
                public void onError(ErrorLevel errorLevel, String file, long line, String message) {
                    if(errorLevel == ErrorLevel.ERROR) {
                        report.addFailedSample(String.format("Yara compilation failed. %s", message), file);
                    }
                }
            };
            compiler.setCallback(compilationCallback);

            super.run();

            yara.finalizeThread();
            if(this.callback != null) {
                this.callback.run();
            }
        }
    }


//    TODO move rule import task to within extraction tasks.
//    TODO Change training of rules module to create list of features contained in each file.
}
