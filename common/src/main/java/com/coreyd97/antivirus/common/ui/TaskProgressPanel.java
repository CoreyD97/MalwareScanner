package com.coreyd97.antivirus.common.ui;

import com.coreyd97.antivirus.common.taskscheduler.Task;
import com.coreyd97.antivirus.common.taskscheduler.TaskStatusListener;

import javax.swing.*;
import java.awt.*;

public class TaskProgressPanel extends JPanel implements TaskStatusListener {
    JProgressBar progressBar;
    JLabel progressText;
    Task task;

    TaskProgressPanel(Task task){
        super();
        this.task = task;
        this.setLayout(new GridBagLayout());
        this.setBorder(BorderFactory.createTitledBorder(task.getName()));
        this.progressBar = new JProgressBar();
        this.progressText = new JLabel("0%");
        task.registerStatusListener(this);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.BOTH;
        gbc.gridx = gbc.gridy = 1;
        gbc.weightx = 0.9;
        this.add(progressBar, gbc);
        gbc.gridx++;
        gbc.weightx = 0;
        this.add(Box.createHorizontalStrut(7), gbc);
        gbc.gridx++;
        gbc.weightx = 0.1;
        this.add(progressText, gbc);
    }

    @Override
    public void onTaskProgress(Task task) {
        this.progressBar.setValue(this.progressBar.getValue()+1);
        this.progressText.setText(String.format("%d/%d (%.0f%%)", this.progressBar.getValue(), this.progressBar.getMaximum(), 100*(double)this.progressBar.getValue()/(double)this.progressBar.getMaximum()));
    }

    @Override
    public void onTaskStart(Task task, int steps) {
        this.progressBar.setMaximum(steps);
    }

    @Override
    public void onTaskStepsAdded(Task task, int steps) {
        this.progressBar.setMaximum(this.progressBar.getMaximum()+steps);
        this.progressText.setText(String.format("%d/%d (%.0f%%)", this.progressBar.getValue(), this.progressBar.getMaximum(), 100*(double)this.progressBar.getValue()/(double)this.progressBar.getMaximum()));
    }

    @Override
    public void onTaskComplete(Task task) {
        //Do nothing, should be cleaned up by manager panel.
    }

    @Override
    public void onTaskException(Task task, Throwable throwable) {

    }

    public void cleanup() {
        this.task.removeStatusListener(this);
    }
}
