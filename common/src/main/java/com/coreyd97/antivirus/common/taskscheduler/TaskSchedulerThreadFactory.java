package com.coreyd97.antivirus.common.taskscheduler;

import java.util.concurrent.ThreadFactory;
import java.util.concurrent.atomic.AtomicInteger;

public class TaskSchedulerThreadFactory implements ThreadFactory {
    private static final AtomicInteger poolNumber = new AtomicInteger(1);
    private final ThreadGroup group;
    private final AtomicInteger threadNumber = new AtomicInteger(1);

    TaskSchedulerThreadFactory(){
        SecurityManager securityManager = System.getSecurityManager();
        this.group = (securityManager != null) ? securityManager.getThreadGroup() : Thread.currentThread().getThreadGroup();
    }

    @Override
    public Thread newThread(Runnable runnable) {
        String name;
        if(runnable instanceof Task){
            name = "TaskScheduler-" + ((Task) runnable).getName() + "-thread-" + threadNumber.getAndIncrement();
        }else{
            name = "TaskScheduler-thread-" + threadNumber.getAndIncrement();
        }

        Thread thread = new Thread(group, runnable, name, 0);
        if (thread.isDaemon())
            thread.setDaemon(false);
        if (thread.getPriority() != Thread.NORM_PRIORITY)
            thread.setPriority(Thread.NORM_PRIORITY);
        return thread;
    }
}
