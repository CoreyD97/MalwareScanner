package com.coreyd97.antivirus.common.taskscheduler;

import com.coreyd97.antivirus.common.report.Report;
import com.coreyd97.antivirus.common.report.ReportHandler;
import com.coreyd97.antivirus.common.report.ReportPublisher;

import java.io.File;

public abstract class FileTask extends Task implements ReportPublisher {
    enum ReportFrequency {SINGLE, BATCH, INDIVIDUAL}
    private File[] files;
    protected Report report;
    protected ReportFrequency reportFrequency;
    private ReportHandler reportHandler;
    private int pendingReports = 0;

    protected FileTask(String taskName, File[] files, Report report) {
        this(taskName, files, report, ReportFrequency.BATCH);
    }

    protected FileTask(String taskName, File[] files, Report report, ReportFrequency reportFrequency) {
        super(taskName);
        this.files = files;
        this.report = report;
        this.reportFrequency = reportFrequency;
    }

    public void setReportHandler(ReportHandler reportHandler){
        this.reportHandler = reportHandler;
    }

    //Implement in subclasses to define handling of each file.
    protected abstract void processFile(File file);

    private void processFiles(File files[]){
        for (File file : files) {
            if(file.isDirectory()){
                File[] childFiles = file.listFiles();
                if(childFiles == null) return;
                taskAddSteps(childFiles.length);
                processFiles(childFiles);
            }else{
                //Fill report with file features
                processFile(file);
                publishReport();
                taskProgress();
            }
        }
    }

    private void publishReport(){
        try {
            switch (reportFrequency) {
                case INDIVIDUAL: {
                    this.reportHandler.onReportReady(report);
                    this.report = report.getClass().newInstance();
                    break;
                }
                case BATCH: {
                    if(this.pendingReports++ == 100){
                        this.reportHandler.onReportReady(report);
                        this.report = report.getClass().newInstance();
                        this.pendingReports = 0;
                    }
                    break;
                }
            }
        } catch (IllegalAccessException | InstantiationException ignored) {}
    }


    @Override
    public Report call() {
        taskStart(files.length);
        processFiles(this.files);
        if(this.reportFrequency == ReportFrequency.SINGLE){
            this.reportHandler.onReportReady(report);
        }else if(this.reportFrequency == ReportFrequency.BATCH && this.pendingReports != 0){
            this.reportHandler.onReportReady(report);
        }
        taskComplete();
        return report;
    }

    public Report getReport() {
        return report;
    }
}
