package com.coreyd97.antivirus.common.test;

import com.coreyd97.antivirus.common.exception.TreePathException;
import com.coreyd97.antivirus.common.utils.MalwareStateTree;
import org.junit.Assert;
import org.junit.Test;

import java.io.File;

public class MalwareStateTreeTest {

    @Test(expected = TreePathException.class)
    public void testInvalidPathException() throws TreePathException {
        MalwareStateTree malware = MalwareStateTree.createTree("/home/corey");
        malware.toRelPath("/home/fake");
    }

    @Test
    public void testValidRelativePaths() throws TreePathException {
        MalwareStateTree malware = MalwareStateTree.createTree("/home/corey");
        String[] relative = malware.toRelPath("/home/corey");
        Assert.assertArrayEquals(relative, new String[0]);
        relative = malware.toRelPath("/home/corey/a/");
        Assert.assertArrayEquals(relative, new String[]{"a"});
        relative = malware.toRelPath("/home/corey/a");
        Assert.assertArrayEquals(relative, new String[]{"a"});
        relative = malware.toRelPath("/home/corey/a/b/c/d/e/f/g");
        Assert.assertArrayEquals(relative, new String[]{"a","b","c","d","e","f","g"});
        relative = malware.toRelPath("/home/corey/a/b/c/d/e/f/g/");
        Assert.assertArrayEquals(relative, new String[]{"a","b","c","d","e","f","g"});
    }

    @Test
    public void testAddMalware() throws TreePathException {
        MalwareStateTree malware = MalwareStateTree.createTree("/");
        Assert.assertFalse(malware.hasMalware());
        Assert.assertFalse(malware.hasMalware("/home"));
        Assert.assertFalse(malware.hasMalware("/home/"));
        Assert.assertFalse(malware.hasMalware("/home/corey"));
        Assert.assertFalse(malware.hasMalware("/home/corey/"));
        Assert.assertFalse(malware.hasMalware("/home/corey/a"));
        malware.addMalware("/home/corey");
        Assert.assertTrue(malware.hasMalware());
        Assert.assertTrue(malware.hasMalware("/home"));
        Assert.assertTrue(malware.hasMalware("/home/"));
        Assert.assertTrue(malware.hasMalware("/home/corey"));
        Assert.assertTrue(malware.hasMalware("/home/corey/"));
        Assert.assertFalse(malware.hasMalware("/home/corey/a"));
        malware.addMalware("/home/corey/a");
        Assert.assertTrue(malware.hasMalware("/home/corey/a"));
    }
}
