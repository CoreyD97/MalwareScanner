package com.coreyd97.c45;

import java.util.ArrayList;
import java.util.List;

public class TreeNode {
    public String classification;
    public boolean isTerminal;

    public String attribute;
    public String value;
    public boolean isCategoric;
    public boolean isBoolean;
    public List<TreeNode> children;


    public TreeNode(String value, boolean isTerminal){
        this.isTerminal = isTerminal;
        if(isTerminal) {
            this.classification = value;
        }else{
            this.attribute = value;
        }
        this.children = new ArrayList<>();
    }

    public String classify(DataElement element){
        if(this.isTerminal) return this.classification;
        if(this.isBoolean){
            for (TreeNode child : this.children) {
                if(child.value.equals(String.valueOf(element.labels.contains(this.attribute)))){
                    return child.classify(element);
                }
            }
        }else if(this.isCategoric){
            for (TreeNode child : this.children) {
                if(child.value.equals(element.features.get(this.attribute))){
                    return child.classify(element);
                }
            }
        }else{
            //numeric split on attribute value.
            if(Double.parseDouble(element.features.get(attribute)) >= Double.parseDouble(value))
                return children.get(0).classify(element);
            else
                return children.get(1).classify(element);
        }
        return null;
    }

    public void addChild(TreeNode child){
        this.children.add(child);
    }

    public void print(){
        this.print(0);
    }

    void print(int depth) {
        if (isTerminal) {
            System.out.print(": " + classification);
        } else {
            for (TreeNode child : children) {
                System.out.print("\n");
                for (int i = 0; i < depth; i++)
                    System.out.print("|\t");
                System.out.print(attribute);
                if (!isCategoric && !isBoolean) {
//                    if (child.leq)
//                        System.out.print(" <= ");
//                    else
//                        System.out.print(" > ");
                    System.out.print(" | ");
                    System.out.print(value);
                    // System.out.print(" [" + child.negativeInstances + " " + child.positiveInstances + "]");
                    child.print(depth + 1);
                } else {
                    System.out.print(" = " + child.value);
                    // System.out.print(" [" + child.negativeInstances + " " + child.positiveInstances + "]");
                    child.print(depth + 1);
                }

            }

        }
    }

    public void simplify(){
        if(!isTerminal){
            for (TreeNode child : this.children) {
                child.simplify();
            }
            String classification = children.get(0).classification;
            for (TreeNode child : this.children) {
                if(!child.isTerminal || !child.classification.equalsIgnoreCase(classification)){
                    return;
                }
            }

            this.classification = classification;
            this.isTerminal = true;
            this.children = null;
        }
    }
}
