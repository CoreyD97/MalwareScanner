import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.reflect.TypeToken;

import java.io.*;
import java.net.Inet4Address;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashSet;

public class ClientManager {
    enum BanMethod {DROP, REJECT}
    private HashSet<Inet4Address> bannedClients;
    private HashSet<Inet4Address> allowedDestinations;
    private BanMethod banMethod;

    private File configFile;

    public ClientManager() {
        bannedClients = new HashSet<>();
        allowedDestinations = new HashSet<>();
        this.banMethod = BanMethod.REJECT;

        File configDir = new File("config");
        if(!configDir.exists()){
            configDir.mkdir();
        }

        flush();

        configFile = new File("config", "firewall.json");
        if(configFile.exists()){
            try {
                JsonObject json = new Gson().fromJson(new FileReader(configFile), JsonObject.class);
                if(json != null) {
                    JsonArray whitelistArray = json.getAsJsonArray("Whitelist");
                    JsonArray banArray = json.getAsJsonArray("Bans");
                    for (JsonElement whitelisted : whitelistArray) {
                        try {
                            Inet4Address addr = (Inet4Address) Inet4Address.getByName(whitelisted.getAsString());
                            this.allowedDestinations.add(addr);
                            whitelist(addr);
                        } catch (UnknownHostException e) {
                        }
                    }

                    for (JsonElement banned : banArray) {
                        try {
                            Inet4Address bannedAddr = (Inet4Address) Inet4Address.getByName(banned.getAsString());
                            this.bannedClients.add(bannedAddr);
                            ban(bannedAddr);
                        } catch (UnknownHostException e) {
                        }
                    }
                }
            } catch (FileNotFoundException e) {}
        }
    }

    private void save(){
        JsonObject json = new JsonObject();
        JsonArray whitelist = new Gson().toJsonTree(this.allowedDestinations,
                new TypeToken<HashSet<Inet4Address>>(){}.getType()).getAsJsonArray();
        JsonArray bannedClients = new Gson().toJsonTree(this.bannedClients,
                new TypeToken<HashSet<Inet4Address>>(){}.getType()).getAsJsonArray();
        json.add("Whitelist", whitelist);
        json.add("Bans", bannedClients);

        try {
            PrintWriter printWriter = new PrintWriter(configFile);
            printWriter.println(json.toString());
            printWriter.close();
        } catch (IOException e) {
            System.err.println("Could not save file!");
        }
    }

    private void flush(){
        System.out.println("Flushing Rules");
        ProcessBuilder processBuilder = new ProcessBuilder("iptables", "-FFORWARD");
        processBuilder.inheritIO();
        System.out.println(String.join(" ", processBuilder.command()));
        try {
            processBuilder.start();
        } catch (IOException e) {}
    }

    private void whitelist(Inet4Address address){
        System.out.println("Whitelisting " + address);
        ProcessBuilder processBuilder = new ProcessBuilder("iptables", "-IFORWARD",
                "-d " + address.getHostAddress(), "-jACCEPT");
        processBuilder.inheritIO();
        System.out.println(String.join(" ", processBuilder.command()));
        try {
            processBuilder.start();
        } catch (IOException e) {}
    }

    public void addWhitelistedAddress(Inet4Address address){
        if(!this.allowedDestinations.contains(address)) {
            this.allowedDestinations.add(address);
            whitelist(address);
            save();
        }else{
            System.out.println(address.getHostAddress() + " already whitelisted. Ignoring...");
        }
    }

    private void unwhitelist(Inet4Address address){
        try {
            System.out.println("Unwhitelisting " + address);
            ProcessBuilder processBuilder = new ProcessBuilder("iptables", "-DFORWARD",
                    "-d " + address.getHostAddress(), "-jACCEPT");
            processBuilder.inheritIO();
            System.out.println(String.join(" ", processBuilder.command()));
            processBuilder.start();
        } catch (IOException e) {}
    }

    public void removeWhitelistAddress(Inet4Address address){
        this.allowedDestinations.remove(address);
        unwhitelist(address);
        save();
    }


    public void banClient(Inet4Address client){
        this.bannedClients.add(client);
        ban(client);
        save();
    }

    private void ban(Inet4Address client){
        try {
            //Add REJECT rule for traffic from client after our whitelist.
            ProcessBuilder processBuilder;
            if(allowedDestinations.size() > 0) {
                processBuilder = new ProcessBuilder("iptables",
                        "-I", "FORWARD", "" + (allowedDestinations.size()+1),
                        "-s", client.getHostAddress(), "-j", "" + banMethod);
            }else{
                processBuilder = new ProcessBuilder("iptables",
                        "-I", "FORWARD", "-s", client.getHostAddress(), "-j", ""+banMethod);
            }
            processBuilder.inheritIO();
            System.out.println(String.join(" ", processBuilder.command()));
            processBuilder.start();
        } catch (IOException e) {}
    }

    public void unbanClient(Inet4Address client){
        this.bannedClients.remove(client);
        unban(client);
        save();
    }

    private void unban(Inet4Address client){
        try {
            ProcessBuilder processBuilder = new ProcessBuilder("iptables", "-DFORWARD",
                    "-s " + client.getHostAddress(), "-j" + this.banMethod);
            processBuilder.inheritIO();
            System.out.println(String.join(" ", processBuilder.command()));
            processBuilder.start();
        } catch (IOException e) {}
        this.bannedClients.remove(client);
    }

    public HashSet<Inet4Address> getBannedClients() {
        return bannedClients;
    }
}
